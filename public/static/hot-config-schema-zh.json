{
    "components": {
        "schemas": {
            "cluster.log": {
                "properties": {
                    "console_handler": {
                        "description": "日志处理进程将日志事件打印到 EMQX 控制台。",
                        "label": "Console Handler",
                        "$ref": "#/components/schemas/cluster.console_handler"
                    },
                    "file_handlers": {
                        "description": "需要持久化到文件的日志处理进程列表。默认只有 default 一个处理进程。",
                        "label": "File Handler",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/cluster.log_file_handler"
                            }
                        },
                        "type": "object"
                    },
                    "error_logger": {
                        "default": "silent",
                        "description": "让 error_logger 日志处理进程关闭，防止一条异常信息被记录多次。",
                        "label": "error_logger",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "broker.listener_wss_opts": {
                "properties": {
                    "cacertfile": {
                        "description": "</br>受信任的PEM格式CA证书捆绑文件</br>此文件中的证书用于验证TLS对等方的证书。</br>如果要信任新CA，请将新证书附加到文件中。</br>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）</br>注意：从文件中失效（删除）证书不会影响已建立的连接。</br>",
                        "label": "CA 证书文件",
                        "type": "string"
                    },
                    "certfile": {
                        "description": "</br>PEM格式证书链文件</br>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，然后是直接颁发者证书，依此类推。</br>虽然根CA证书是可选的，但它应该放在</br>如果要添加文件，请将其删除。</br>",
                        "label": "证书文件",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "</br>PEM格式的私钥文件。</br>",
                        "label": "私钥文件",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "</br>启用或禁用对等验证。</br>",
                        "label": "对等验证",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "</br>启用 TLS 会话重用。</br>",
                        "label": "TLS 会话重用",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "</br>在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。因此，如果深度为0，则对等方必须由受信任的根CA直接签名；如果1，路径可以是PEER、CA、ROOT-CA；如果是2，则路径可以是PEER、CA、CA、ROOT-CA等等。默认值为10。</br>",
                        "label": "CA 证书深度",
                        "type": "number"
                    },
                    "password": {
                        "description": "</br>包含用户密码的字符串。</br>仅在私钥文件受密码保护时使用。</br>",
                        "label": "秘钥文件密码",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "</br>支持所有TLS/DTLS版本</br></br>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "SSL 版本",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "</br>此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如</br><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或</br><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。</br></br>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。</br>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。</br></br>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。</br>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式</br>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。</br>不兼容的密码套件将被自动删除。</br></br>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。</br></br></br>注：PSK 的 Ciphers 不支持 tlsv1.3</br>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。</br></br></br>PSK 密码套件：</br><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,</br>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,</br>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,</br>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code></br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "</br>用于查找预共享密钥（PSK）标识的 EMQX 内部回调。</br>",
                        "label": "SSL PSK 用户回调",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "</br>SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。</br>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。</br>",
                        "label": "SSL 重新协商",
                        "type": "boolean"
                    },
                    "dhfile": {
                        "description": "</br>如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数</br></br>注意：TLS 1.3不支持<code>dhfile</code>选项。</br>",
                        "label": "SSL dhfile",
                        "type": "string"
                    },
                    "fail_if_no_peer_cert": {
                        "default": false,
                        "description": "</br>TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。</br>如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。</br>如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。</br>",
                        "label": "没有证书则 SSL 失败",
                        "type": "boolean"
                    },
                    "honor_cipher_order": {
                        "default": true,
                        "description": "</br>一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。</br>",
                        "label": "SSL honor cipher order",
                        "type": "boolean"
                    },
                    "client_renegotiation": {
                        "default": true,
                        "description": "</br>在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。</br>这可能会成为拒绝服务攻击的载体。</br>SSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。</br>默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。</br>",
                        "label": "SSL 客户端冲协商",
                        "type": "boolean"
                    },
                    "handshake_timeout": {
                        "default": "15s",
                        "description": "</br>握手完成所允许的最长时间</br>",
                        "label": "握手超时时间",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "broker.sysmon_os": {
                "properties": {
                    "cpu_check_interval": {
                        "default": "60s",
                        "description": "定期 CPU 检查的时间间隔。",
                        "label": "定期 CPU 检查的时间间隔",
                        "type": "duration"
                    },
                    "cpu_high_watermark": {
                        "default": "80%",
                        "description": "在发出相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
                        "label": "CPU 高水位线",
                        "type": "percent"
                    },
                    "cpu_low_watermark": {
                        "default": "60%",
                        "description": "在解除相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
                        "label": "CPU 低水位线",
                        "type": "percent"
                    },
                    "mem_check_interval": {
                        "default": "60s",
                        "description": "定期内存检查的时间间隔。",
                        "label": "内存检查间隔",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "sysmem_high_watermark": {
                        "default": "70%",
                        "description": "在发出相应报警之前可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                        "label": "系统内存高水位线",
                        "type": "percent"
                    },
                    "procmem_high_watermark": {
                        "default": "5%",
                        "description": "在发出相应警报之前，一个Erlang进程可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                        "label": "进程内存高水位线",
                        "type": "percent"
                    }
                },
                "type": "object"
            },
            "broker.sysmon": {
                "properties": {
                    "vm": {
                        "description": "vm Description",
                        "label": "vm",
                        "$ref": "#/components/schemas/broker.sysmon_vm"
                    },
                    "os": {
                        "description": "os Description",
                        "label": "os",
                        "$ref": "#/components/schemas/broker.sysmon_os"
                    },
                    "top": {
                        "description": "top Description",
                        "label": "top",
                        "$ref": "#/components/schemas/broker.sysmon_top"
                    }
                },
                "type": "object"
            },
            "dashboard.http": {
                "required": [
                    "bind",
                    "enable"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "忽略或启用该监听器配置",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "bind": {
                        "default": 18803,
                        "description": "监听的地址与端口，在dashboard更新此配置时，会重启dashboard服务。",
                        "label": "绑定端口",
                        "oneOf": [
                            {
                                "type": "ip_port"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "num_acceptors": {
                        "default": 4,
                        "description": "TCP协议的Socket acceptor池大小",
                        "label": "Acceptor 数量",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": 512,
                        "description": "同时处理的最大连接数",
                        "label": "最大连接数",
                        "type": "number"
                    },
                    "backlog": {
                        "default": 1024,
                        "description": "排队等待连接的队列的最大长度",
                        "label": "排队长度",
                        "type": "number"
                    },
                    "send_timeout": {
                        "default": "5s",
                        "description": "Socket发送超时时间",
                        "label": "发送超时时间",
                        "type": "duration"
                    },
                    "inet6": {
                        "default": false,
                        "description": "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致仪表盘无法使用。",
                        "label": "IPv6",
                        "type": "boolean"
                    },
                    "ipv6_v6only": {
                        "default": false,
                        "description": "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
                        "label": "IPv6 only",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-mysql.authentication": {
                "required": [
                    "database",
                    "server",
                    "query",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "mysql"
                        ],
                        "type": "enum"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "query": {
                        "description": "用于查询密码散列等用于认证的数据的 SQL 语句。",
                        "label": "查询语句",
                        "type": "string"
                    },
                    "query_timeout": {
                        "default": "5s",
                        "description": "SQL 查询的超时时间。",
                        "label": "查询超时",
                        "type": "duration"
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "server": {
                        "description": "</br>将要连接的 IPv4 或 IPv6 地址，或者主机名。</br>主机名具有以下形式：`Host[:Port]`。</br>如果未指定 `[:Port]`，则使用 MySQL 默认端口 3306。</br>",
                        "label": "服务器地址",
                        "type": "ip_port"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "cluster.cluster_static": {
                "properties": {
                    "seeds": {
                        "default": "",
                        "description": "集群中的EMQX节点名称列表，</br>指定固定的节点列表，多个节点间使用逗号 , 分隔。</br>当 cluster.discovery_strategy 为 static 时，此配置项才有效。</br>适合于节点数量较少且固定的集群。</br>          ",
                        "items": {
                            "type": "string"
                        },
                        "label": "集群静态节点",
                        "readOnly": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "broker.shared_subscription_group": {
                "properties": {
                    "strategy": {
                        "description": "strategy Description",
                        "label": "strategy",
                        "symbols": [
                            "random",
                            "round_robin",
                            "sticky",
                            "local",
                            "hash_topic",
                            "hash_clientid"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "cluster.console_handler": {
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "启用此日志处理进程。",
                        "label": "启用日志处理进程",
                        "type": "boolean"
                    },
                    "level": {
                        "default": "warning",
                        "description": "设置日志级别。 默认为warning。",
                        "label": "日志级别",
                        "symbols": [
                            "debug",
                            "info",
                            "notice",
                            "warning",
                            "error",
                            "critical",
                            "alert",
                            "emergency",
                            "all"
                        ],
                        "type": "enum"
                    },
                    "time_offset": {
                        "default": "system",
                        "description": "日志格式中的时间戳，使用的时间偏移量。默认使用系统时区system，当为utc为无时间偏移量</br>为具体的N(1-24)数字时，则代表时间偏移量+N。</br>      ",
                        "label": "时间偏移量",
                        "type": "string"
                    },
                    "chars_limit": {
                        "default": "unlimited",
                        "description": "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。最小可设置的长度为100。",
                        "label": "单个日志最大长度",
                        "oneOf": [
                            {
                                "minimum": 100,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "formatter": {
                        "default": "text",
                        "description": "选择日志格式。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
                        "label": "日志格式",
                        "symbols": [
                            "text",
                            "json"
                        ],
                        "type": "enum"
                    },
                    "single_line": {
                        "default": true,
                        "description": "如果设置为 true，则单行打印日志。 否则，日志消息可能跨越多行。",
                        "label": "单行模式",
                        "type": "boolean"
                    },
                    "sync_mode_qlen": {
                        "default": 100,
                        "description": "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。</br>这意味着，日志落地速度不会影响正常的业务进程，因为它们不需要等待日志处理进程的响应。</br>如果消息队列的增长超过了这个值，处理程序开始同步处理日志事件。也就是说，发送事件的客户进程必须等待响应。</br>当处理程序将消息队列减少到低于sync_mode_qlen阈值的水平时，异步操作就会恢复。</br>默认为100条信息，当等待的日志事件大于100条时，就开始同步处理日志。",
                        "label": "异步模式最大事件数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "drop_mode_qlen": {
                        "default": 3000,
                        "description": "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。起到过载保护的功能。</br>为了使过载保护算法正常工作必须要：<code> sync_mode_qlen =< drop_mode_qlen =< flush_qlen <\\code> 且 drop_mode_qlen > 1</br>要禁用某些模式，请执行以下操作。</br>- 如果sync_mode_qlen被设置为0，所有的日志事件都被同步处理。也就是说，异步日志被禁用。</br>- 如果sync_mode_qlen被设置为与drop_mode_qlen相同的值，同步模式被禁用。也就是说，处理程序总是以异步模式运行，除非调用drop或flushing。</br>- 如果drop_mode_qlen被设置为与flush_qlen相同的值，则drop模式被禁用，永远不会发生。</br>",
                        "label": "缓存最大日志事件数",
                        "type": "string"
                    },
                    "flush_qlen": {
                        "default": 8000,
                        "description": "如果缓冲日志事件的数量增长大于此阈值，则会发生刷新（删除）操作。 日志处理进程会丢弃缓冲的日志消息。</br>来缓解自身不会由于内存瀑涨而影响其它业务进程。日志内容会提醒有多少事件被删除。",
                        "label": "刷新阈值",
                        "type": "string"
                    },
                    "overload_kill": {
                        "description": "overload_kill Description",
                        "label": "overload_kill",
                        "$ref": "#/components/schemas/cluster.log_overload_kill"
                    },
                    "burst_limit": {
                        "description": "burst_limit Description",
                        "label": "burst_limit",
                        "$ref": "#/components/schemas/cluster.log_burst_limit"
                    },
                    "supervisor_reports": {
                        "default": "error",
                        "description": " supervisor 报告的类型。默认为 error 类型。</br>  - `error`：仅记录 Erlang 进程中的错误。</br>  - `progress`：除了 error 信息外，还需要记录进程启动的详细信息。",
                        "label": "报告类型",
                        "symbols": [
                            "error",
                            "progress"
                        ],
                        "type": "enum"
                    },
                    "max_depth": {
                        "default": 100,
                        "description": "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
                        "label": "最大深度",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "connector-http.request": {
                "properties": {
                    "method": {
                        "description": "HTTP 请求方法。",
                        "label": "HTTP 请求方法",
                        "symbols": [
                            "post",
                            "put",
                            "get",
                            "delete"
                        ],
                        "type": "enum"
                    },
                    "path": {
                        "description": "HTTP请求路径。",
                        "label": "HTTP请求路径",
                        "type": "string"
                    },
                    "body": {
                        "description": "HTTP请求报文主体。",
                        "label": "HTTP请求报文主体",
                        "type": "string"
                    },
                    "headers": {
                        "description": "HTTP 头字段列表。",
                        "label": "HTTP 头字段列表",
                        "type": "string"
                    },
                    "request_timeout": {
                        "description": "HTTP 请求超时。",
                        "label": "HTTP 请求超时",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "broker.mqtt_ssl_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/broker.tcp_opts"
                    },
                    "ssl": {
                        "description": "ssl Description",
                        "label": "ssl",
                        "$ref": "#/components/schemas/broker.listener_ssl_opts"
                    },
                    "bind": {
                        "description": "</br>监听套接字的 IP 地址和端口。</br>",
                        "label": "IP 地址和端口",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "监听器接收池的大小。",
                        "label": "接收器数量",
                        "type": "string"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "</br>监听器允许的最大并发连接数。</br>",
                        "label": "最大并发连接数",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "</br>发布或订阅时，请在所有主题前面加上 mountpoint 字符串。</br></br>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。</br></br>例如，如果客户机 A 使用 <code>listeners.tcp.<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。</br>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息</br></br>设置为<code>\"\"</code> 以禁用该功能</br></br>mountpoint 字符串中的变量：</br>- <code>${clientid}</code>: clientid</br>- <code>${username}</code>: username</br>",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "</br>监听器所属的配置组。</br>",
                        "label": "配置组",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "</br>速率限制类型</br>",
                        "label": "速率限制类型",
                        "properties": {
                            "$ratelimit_name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "此监听器的访问控制规则。",
                        "items": {
                            "type": "string"
                        },
                        "label": "访问控制规则",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "</br>如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 </br>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/</br>",
                        "label": "Proxy protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "</br>代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。</br>",
                        "label": "Proxy protocol 超时时间",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "</br>监听器认证重载。</br></br>认证配置可以是单个认证器实例，也可以是一个认证器数组组成的认证链。</br>执行登录验证时（用户名、客户端 ID 等），将按配置的顺序执行</br>",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "每个监听器的认证覆盖",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "cluster.cluster_mcast": {
                "properties": {
                    "addr": {
                        "default": "239.192.0.1",
                        "description": "指定多播 IPv4 地址。</br>当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。</br>          ",
                        "label": "多播地址",
                        "readOnly": true,
                        "type": "string"
                    },
                    "ports": {
                        "default": [
                            4369,
                            4370
                        ],
                        "description": "指定多播端口。如有多个端口使用逗号 , 分隔。</br>当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。</br>          ",
                        "items": {
                            "type": "number"
                        },
                        "label": "多播端口",
                        "readOnly": true,
                        "type": "array"
                    },
                    "iface": {
                        "default": "0.0.0.0",
                        "description": "指定节点发现服务需要绑定到本地 IP 地址。</br>当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。</br>          ",
                        "label": "多播绑定地址",
                        "readOnly": true,
                        "type": "string"
                    },
                    "ttl": {
                        "default": 255,
                        "description": "指定多播的 Time-To-Live 值。</br>当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。</br>          ",
                        "label": "多播TTL",
                        "maximum": 255,
                        "minimum": 0,
                        "readOnly": true,
                        "type": "number"
                    },
                    "loop": {
                        "default": true,
                        "description": "设置多播的报文是否投递到本地回环地址。</br>当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。</br>          ",
                        "label": "多播回环开关",
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "sndbuf": {
                        "default": "16KB",
                        "description": "外发数据报的内核级缓冲区的大小。</br>当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。</br>          ",
                        "label": "多播发送缓存区",
                        "readOnly": true,
                        "type": "byteSize"
                    },
                    "recbuf": {
                        "default": "16KB",
                        "description": "接收数据报的内核级缓冲区的大小。</br>当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。</br>          ",
                        "label": "多播接收数据缓冲区",
                        "readOnly": true,
                        "type": "byteSize"
                    },
                    "buffer": {
                        "default": "32KB",
                        "description": "用户级缓冲区的大小。</br>当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。</br>          ",
                        "label": "多播用户级缓冲区",
                        "readOnly": true,
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "cluster.cluster_k8s": {
                "properties": {
                    "apiserver": {
                        "description": "指定 Kubernetes API Server。如有多个 Server 使用逗号 , 分隔。</br>当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。</br>          ",
                        "label": "K8s 服务地址",
                        "readOnly": true,
                        "type": "string"
                    },
                    "service_name": {
                        "default": "emqx",
                        "description": "指定 Kubernetes 中 EMQX 的服务名。</br>当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。</br>          ",
                        "label": "K8s 服务别名",
                        "readOnly": true,
                        "type": "string"
                    },
                    "address_type": {
                        "description": "当使用 k8s 方式集群时，address_type 用来从 Kubernetes 接口的应答里获取什么形式的 Host 列表。</br>指定 cluster.k8s.address_type 为 ip，则将从 Kubernetes 接口中获取 emqx 服务的 IP 地址列表:</br>- 172.16.122.31 </br>- 172.16.122.32 </br>- 172.16.122.33 </br>然后与 cluster.k8s.app_name 配置指定的 app name 拼接，得到 emqx 节点列表: </br>- emqx@172.16.122.31</br>- emqx@172.16.122.32</br>- emqx@172.16.122.33</br>          ",
                        "label": "K8s 地址类型",
                        "readOnly": true,
                        "symbols": [
                            "ip",
                            "dns",
                            "hostname"
                        ],
                        "type": "enum"
                    },
                    "app_name": {
                        "default": "emqx",
                        "description": "app_name 用来跟获取的 Host 列表拼接，得到节点列表。</br>当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。</br>          ",
                        "label": "K8s 节点名前缀",
                        "readOnly": true,
                        "type": "string"
                    },
                    "namespace": {
                        "default": "default",
                        "description": "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，</br>可设置 emqx 节点名的命名空间。与 cluster.k8s.suffix 一起使用用以拼接得到节点名列表。</br>      ",
                        "label": "K8s 命名空间",
                        "readOnly": true,
                        "type": "string"
                    },
                    "suffix": {
                        "default": "pod.local",
                        "description": "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，可设置 emqx 节点名的后缀。</br>与 cluster.k8s.namespace 一起使用用以拼接得到节点名列表。</br>          ",
                        "label": "K8s 前缀",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "broker.deflate_opts": {
                "properties": {
                    "level": {
                        "description": "压缩级别",
                        "label": "压缩级别",
                        "symbols": [
                            "none",
                            "default",
                            "best_compression",
                            "best_speed"
                        ],
                        "type": "enum"
                    },
                    "mem_level": {
                        "default": 8,
                        "description": "</br>指定压缩状态的大小</br>较低的值会减少每个连接的内存使用。</br>",
                        "label": "压缩状态大小",
                        "maximum": 9,
                        "minimum": 1,
                        "type": "number"
                    },
                    "strategy": {
                        "description": "</br>指定压缩策略。</br>",
                        "label": "指定压缩策略",
                        "symbols": [
                            "default",
                            "filtered",
                            "huffman_only",
                            "rle"
                        ],
                        "type": "enum"
                    },
                    "server_context_takeover": {
                        "description": "接管意味着在服务器消息之间保留压缩状态。",
                        "label": "服务上下文接管",
                        "symbols": [
                            "takeover",
                            "no_takeover"
                        ],
                        "type": "enum"
                    },
                    "client_context_takeover": {
                        "description": "</br>接管意味着在客户端消息之间保留压缩状态。</br>",
                        "label": "客户端上下文接管",
                        "symbols": [
                            "takeover",
                            "no_takeover"
                        ],
                        "type": "enum"
                    },
                    "server_max_window_bits": {
                        "default": 15,
                        "description": "</br>指定服务器压缩上下文的大小。</br>",
                        "label": "服务器压缩窗口大小",
                        "maximum": 15,
                        "minimum": 8,
                        "type": "number"
                    },
                    "client_max_window_bits": {
                        "default": 15,
                        "description": "</br>指定客户端压缩上下文的大小。</br>",
                        "label": "压缩窗口大小",
                        "maximum": 15,
                        "minimum": 8,
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "broker.tcp_opts": {
                "properties": {
                    "active_n": {
                        "default": 100,
                        "description": "</br>为此套接字指定{active，N}选项</br>See: https://erlang.org/doc/man/inet.html#setopts-2</br>",
                        "label": "active_n",
                        "type": "number"
                    },
                    "backlog": {
                        "default": 1024,
                        "description": "</br>TCP backlog 定义了挂起连接队列可以增长到的最大长度。</br>",
                        "label": "TCP 连接队列长度",
                        "type": "number"
                    },
                    "send_timeout": {
                        "default": "15s",
                        "description": "</br>连接的TCP发送超时。</br>",
                        "label": "TCP 发送超时",
                        "type": "duration"
                    },
                    "send_timeout_close": {
                        "default": true,
                        "description": "</br>如果发送超时，则关闭连接。</br>",
                        "label": "TCP 发送超时关闭连接",
                        "type": "boolean"
                    },
                    "recbuf": {
                        "description": "</br>连接的 TCP 接收缓冲区（OS内核）。</br>",
                        "label": "TCP 接收缓冲区",
                        "type": "byteSize"
                    },
                    "sndbuf": {
                        "description": "</br>连接的 TCP 发送缓冲区（OS内核）。</br>",
                        "label": "TCP 发送缓冲区",
                        "type": "byteSize"
                    },
                    "buffer": {
                        "description": "</br>驱动程序使用的用户空间缓冲区的大小。</br>",
                        "label": "TCP 用户态缓冲区",
                        "type": "byteSize"
                    },
                    "high_watermark": {
                        "default": "1MB",
                        "description": "</br>当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。</br>",
                        "label": "",
                        "type": "byteSize"
                    },
                    "nodelay": {
                        "default": false,
                        "description": "</br>连接的 TCP_NODELAY 标识</br>",
                        "label": "TCP_NODELAY",
                        "type": "boolean"
                    },
                    "reuseaddr": {
                        "default": true,
                        "description": "</br>连接的 SO_REUSEADDR 标识</br>",
                        "label": "SO_REUSEADDR",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "cluster.log_file_handler": {
                "properties": {
                    "file": {
                        "description": "日志文件路径及名字。",
                        "label": "日志文件名字",
                        "type": "string"
                    },
                    "rotation": {
                        "description": "rotation Description",
                        "label": "rotation",
                        "$ref": "#/components/schemas/cluster.log_rotation"
                    },
                    "max_size": {
                        "default": "50MB",
                        "description": "此参数控制日志文件轮换。 `infinity` 意味着日志文件将无限增长，否则日志文件将在达到 `max_size`（以字节为单位）时进行轮换。</br>与 rotation count配合使用。如果 counter 为 10，则是10个文件轮换。</br>",
                        "label": "日志文件轮换大小",
                        "oneOf": [
                            {
                                "type": "byteSize"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "启用此日志处理进程。",
                        "label": "启用日志处理进程",
                        "type": "boolean"
                    },
                    "level": {
                        "default": "warning",
                        "description": "设置日志级别。 默认为warning。",
                        "label": "日志级别",
                        "symbols": [
                            "debug",
                            "info",
                            "notice",
                            "warning",
                            "error",
                            "critical",
                            "alert",
                            "emergency",
                            "all"
                        ],
                        "type": "enum"
                    },
                    "time_offset": {
                        "default": "system",
                        "description": "日志格式中的时间戳，使用的时间偏移量。默认使用系统时区system，当为utc为无时间偏移量</br>为具体的N(1-24)数字时，则代表时间偏移量+N。</br>      ",
                        "label": "时间偏移量",
                        "type": "string"
                    },
                    "chars_limit": {
                        "default": "unlimited",
                        "description": "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。最小可设置的长度为100。",
                        "label": "单个日志最大长度",
                        "oneOf": [
                            {
                                "minimum": 100,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "formatter": {
                        "default": "text",
                        "description": "选择日志格式。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
                        "label": "日志格式",
                        "symbols": [
                            "text",
                            "json"
                        ],
                        "type": "enum"
                    },
                    "single_line": {
                        "default": true,
                        "description": "如果设置为 true，则单行打印日志。 否则，日志消息可能跨越多行。",
                        "label": "单行模式",
                        "type": "boolean"
                    },
                    "sync_mode_qlen": {
                        "default": 100,
                        "description": "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。</br>这意味着，日志落地速度不会影响正常的业务进程，因为它们不需要等待日志处理进程的响应。</br>如果消息队列的增长超过了这个值，处理程序开始同步处理日志事件。也就是说，发送事件的客户进程必须等待响应。</br>当处理程序将消息队列减少到低于sync_mode_qlen阈值的水平时，异步操作就会恢复。</br>默认为100条信息，当等待的日志事件大于100条时，就开始同步处理日志。",
                        "label": "异步模式最大事件数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "drop_mode_qlen": {
                        "default": 3000,
                        "description": "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。起到过载保护的功能。</br>为了使过载保护算法正常工作必须要：<code> sync_mode_qlen =< drop_mode_qlen =< flush_qlen <\\code> 且 drop_mode_qlen > 1</br>要禁用某些模式，请执行以下操作。</br>- 如果sync_mode_qlen被设置为0，所有的日志事件都被同步处理。也就是说，异步日志被禁用。</br>- 如果sync_mode_qlen被设置为与drop_mode_qlen相同的值，同步模式被禁用。也就是说，处理程序总是以异步模式运行，除非调用drop或flushing。</br>- 如果drop_mode_qlen被设置为与flush_qlen相同的值，则drop模式被禁用，永远不会发生。</br>",
                        "label": "缓存最大日志事件数",
                        "type": "string"
                    },
                    "flush_qlen": {
                        "default": 8000,
                        "description": "如果缓冲日志事件的数量增长大于此阈值，则会发生刷新（删除）操作。 日志处理进程会丢弃缓冲的日志消息。</br>来缓解自身不会由于内存瀑涨而影响其它业务进程。日志内容会提醒有多少事件被删除。",
                        "label": "刷新阈值",
                        "type": "string"
                    },
                    "overload_kill": {
                        "description": "overload_kill Description",
                        "label": "overload_kill",
                        "$ref": "#/components/schemas/cluster.log_overload_kill"
                    },
                    "burst_limit": {
                        "description": "burst_limit Description",
                        "label": "burst_limit",
                        "$ref": "#/components/schemas/cluster.log_burst_limit"
                    },
                    "supervisor_reports": {
                        "default": "error",
                        "description": " supervisor 报告的类型。默认为 error 类型。</br>  - `error`：仅记录 Erlang 进程中的错误。</br>  - `progress`：除了 error 信息外，还需要记录进程启动的详细信息。",
                        "label": "报告类型",
                        "symbols": [
                            "error",
                            "progress"
                        ],
                        "type": "enum"
                    },
                    "max_depth": {
                        "default": 100,
                        "description": "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
                        "label": "最大深度",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "broker.mqtt_tcp_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/broker.tcp_opts"
                    },
                    "bind": {
                        "description": "</br>监听套接字的 IP 地址和端口。</br>",
                        "label": "IP 地址和端口",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "监听器接收池的大小。",
                        "label": "接收器数量",
                        "type": "string"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "</br>监听器允许的最大并发连接数。</br>",
                        "label": "最大并发连接数",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "</br>发布或订阅时，请在所有主题前面加上 mountpoint 字符串。</br></br>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。</br></br>例如，如果客户机 A 使用 <code>listeners.tcp.<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。</br>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息</br></br>设置为<code>\"\"</code> 以禁用该功能</br></br>mountpoint 字符串中的变量：</br>- <code>${clientid}</code>: clientid</br>- <code>${username}</code>: username</br>",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "</br>监听器所属的配置组。</br>",
                        "label": "配置组",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "</br>速率限制类型</br>",
                        "label": "速率限制类型",
                        "properties": {
                            "$ratelimit_name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "此监听器的访问控制规则。",
                        "items": {
                            "type": "string"
                        },
                        "label": "访问控制规则",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "</br>如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 </br>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/</br>",
                        "label": "Proxy protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "</br>代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。</br>",
                        "label": "Proxy protocol 超时时间",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "</br>监听器认证重载。</br></br>认证配置可以是单个认证器实例，也可以是一个认证器数组组成的认证链。</br>执行登录验证时（用户名、客户端 ID 等），将按配置的顺序执行</br>",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "每个监听器的认证覆盖",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "broker.sysmon_top": {
                "properties": {
                    "num_items": {
                        "default": 10,
                        "description": "每个监视组的顶级进程数",
                        "label": "顶级进程数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "sample_interval": {
                        "default": "2s",
                        "description": "指定应收集进程顶部的频率",
                        "label": "取样时间",
                        "type": "duration"
                    },
                    "max_procs": {
                        "default": 1000000,
                        "description": "当VM中的进程数超过此值时，停止收集数据",
                        "label": "最大进程数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "db_hostname": {
                        "default": "",
                        "description": "收集数据点的 PostgreSQL 数据库的主机名",
                        "label": "数据库主机名",
                        "type": "string"
                    },
                    "db_port": {
                        "default": 5432,
                        "description": "收集数据点的 PostgreSQL 数据库的端口",
                        "label": "数据库端口",
                        "type": "number"
                    },
                    "db_username": {
                        "default": "system_monitor",
                        "description": "PostgreSQL 数据库的用户名",
                        "label": "数据库用户名",
                        "type": "string"
                    },
                    "db_password": {
                        "default": "system_monitor_password",
                        "description": "PostgreSQL 数据库的密码",
                        "label": "数据库密码",
                        "type": "string"
                    },
                    "db_name": {
                        "default": "postgres",
                        "description": "PostgreSQL 数据库的数据库名",
                        "label": "数据库名",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "authn-hash.bcrypt_rw": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "BCRYPT password hashing.",
                        "label": "name",
                        "symbols": [
                            "bcrypt"
                        ],
                        "type": "enum"
                    },
                    "salt_rounds": {
                        "default": 10,
                        "description": "Salt rounds for BCRYPT password generation.",
                        "example": 10,
                        "label": "salt_rounds",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "broker.listeners": {
                "properties": {
                    "tcp": {
                        "description": "TCP 监听器",
                        "label": "TCP 监听器",
                        "properties": {
                            "$default": {
                                "$ref": "#/components/schemas/broker.mqtt_tcp_listener"
                            }
                        },
                        "type": "object"
                    },
                    "ssl": {
                        "description": "SSL 监听器",
                        "label": "SSL 监听器",
                        "properties": {
                            "$default": {
                                "$ref": "#/components/schemas/broker.mqtt_ssl_listener"
                            }
                        },
                        "type": "object"
                    },
                    "ws": {
                        "description": "HTTP websocket 监听器",
                        "label": "HTTP websocket 监听器",
                        "properties": {
                            "$default": {
                                "$ref": "#/components/schemas/broker.mqtt_ws_listener"
                            }
                        },
                        "type": "object"
                    },
                    "wss": {
                        "description": "HTTPS websocket 监听器",
                        "label": "HTTPS websocket 监听器",
                        "properties": {
                            "$default": {
                                "$ref": "#/components/schemas/broker.mqtt_wss_listener"
                            }
                        },
                        "type": "object"
                    },
                    "quic": {
                        "description": "QUIC 监听器",
                        "label": "QUIC 监听器",
                        "properties": {
                            "$default": {
                                "$ref": "#/components/schemas/broker.mqtt_quic_listener"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "authn-http.post": {
                "required": [
                    "url",
                    "backend",
                    "mechanism",
                    "method"
                ],
                "properties": {
                    "method": {
                        "default": "post",
                        "description": "HTTP 请求方法。",
                        "label": "请求方法",
                        "symbols": [
                            "post"
                        ],
                        "type": "enum"
                    },
                    "headers": {
                        "default": {
                            "accept": "application/json",
                            "cache-control": "no-cache",
                            "connection": "keep-alive",
                            "content-type": "application/json",
                            "keep-alive": "timeout=30, max=1000"
                        },
                        "description": "HTTP Headers 列表",
                        "label": "请求头",
                        "type": "string"
                    },
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "http"
                        ],
                        "type": "enum"
                    },
                    "url": {
                        "description": "认证 HTTP 服务器地址。",
                        "label": "URL",
                        "type": "string"
                    },
                    "body": {
                        "description": "HTTP request body。",
                        "label": "Request Body",
                        "type": "string"
                    },
                    "request_timeout": {
                        "default": "5s",
                        "description": "HTTP 请求超时时长。",
                        "label": "请求超时时间",
                        "type": "duration"
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "连接HTTP服务器的超时时间。",
                        "label": "连接超时",
                        "type": "duration"
                    },
                    "enable_pipelining": {
                        "default": true,
                        "description": "允许HTTP管道。",
                        "label": "HTTP管道",
                        "type": "boolean"
                    },
                    "max_retries": {
                        "default": 5,
                        "description": "请求出错时的最大重试次数。",
                        "label": "最大重试次数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "request": {
                        "description": "</br>如果提供了请求，调用者可以通过以下方式发送 HTTP 请求</br><code>emqx_resource:query(ResourceId, {send_message, BridgeId, Message})</code></br>",
                        "label": "HTTP 请求",
                        "$ref": "#/components/schemas/connector-http.request"
                    },
                    "retry_interval": {
                        "default": "1s",
                        "description": "重试之间的间隔时间。",
                        "label": "重试间隔",
                        "type": "duration"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "zone.force_gc": {
                "properties": {
                    "enable": {
                        "description": "启用强制垃圾回收",
                        "label": "启用强制垃圾回收",
                        "type": "boolean"
                    },
                    "count": {
                        "description": "在进程收到多少消息之后，对此进程执行垃圾回收",
                        "label": "垃圾回收消息数",
                        "minimum": 0,
                        "type": "number"
                    },
                    "bytes": {
                        "description": "在进程处理过多少个字节之后，对此进程执行垃圾回收",
                        "label": "垃圾回收字节数",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "cluster.log_burst_limit": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "启用日志限流保护机制。",
                        "label": "日志限流保护",
                        "type": "boolean"
                    },
                    "max_count": {
                        "default": 10000,
                        "description": "在 `window_time` 间隔内处理的最大日志事件数。 达到限制后，将丢弃连续事件，直到 `window_time` 结束。",
                        "label": "日志事件数",
                        "type": "string"
                    },
                    "window_time": {
                        "default": "1s",
                        "description": "参考 `max_count`。",
                        "label": "Window Time",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "cluster.node": {
                "required": [
                    "data_dir"
                ],
                "properties": {
                    "name": {
                        "default": "emqx@127.0.0.1",
                        "description": "节点名。格式为 <name>@<host>。其中 <host> 可以是 IP 地址，也可以是 FQDN。</br>详见 http://erlang.org/doc/reference_manual/distributed.html。</br>          ",
                        "label": "节点名",
                        "readOnly": true,
                        "type": "string"
                    },
                    "cookie": {
                        "default": "emqxsecretcookie",
                        "description": "分布式 Erlang 集群使用的 cookie 值。集群间保持一致",
                        "label": "节点 Cookie",
                        "readOnly": true,
                        "type": "string"
                    },
                    "data_dir": {
                        "description": "</br>节点数据存放目录，可能会自动创建的子目录如下：</br>- `mnesia/<node_name>`。EMQX的内置数据库目录。例如，`mnesia/emqx@127.0.0.1`。</br>如果节点要被重新命名（例如，`emqx@10.0.1.1`）。旧目录应该首先被删除。</br>- `configs`。在启动时生成的配置，以及集群/本地覆盖的配置。</br>- `patches`: 热补丁文件将被放在这里。</br>- `trace`: 日志跟踪文件。</br></br>**注意**: 一个数据dir不能被两个或更多的EMQX节点同时使用。</br>         ",
                        "label": "节点数据目录",
                        "readOnly": true,
                        "type": "string"
                    },
                    "config_files": {
                        "description": "启动时读取的配置文件列表。后面的配置文件项覆盖前面的文件。",
                        "items": {
                            "type": "string"
                        },
                        "label": "配置文件",
                        "readOnly": true,
                        "type": "array"
                    },
                    "global_gc_interval": {
                        "default": "15m",
                        "description": "系统调优参数，设置节点运行多久强制进行一次全局垃圾回收。",
                        "label": "全局垃圾回收",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "crash_dump_file": {
                        "default": "log/erl_crash.dump",
                        "description": "设置 Erlang crash_dump 文件的存储路径和文件名。",
                        "label": "节点崩溃时的Dump文件",
                        "readOnly": true,
                        "type": "string"
                    },
                    "crash_dump_seconds": {
                        "default": "30s",
                        "description": "保存崩溃文件最大允许时间，如果文件太大，在规则时间内没有保存完成，则会直接结束。",
                        "label": "保存崩溃文件最长时间",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "crash_dump_bytes": {
                        "default": "100MB",
                        "description": "限制崩溃文件的大小，当崩溃时节点内存太大，</br>如果为了保存现场，需要全部存到崩溃文件中，此处限制最多能保存多大的文件。</br>          ",
                        "label": "崩溃文件最大容量",
                        "readOnly": true,
                        "type": "byteSize"
                    },
                    "dist_net_ticktime": {
                        "default": "2m",
                        "description": "系统调优参数，此配置将覆盖 vm.args 文件里的 -kernel net_ticktime 参数。当一个节点持续无响应多久之后，认为其已经宕机并断开连接。</br>      ",
                        "label": "节点间心跳间隔",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "backtrace_depth": {
                        "default": 23,
                        "description": "错误信息中打印的最大堆栈层数",
                        "label": "最大堆栈导数",
                        "readOnly": true,
                        "type": "number"
                    },
                    "applications": {
                        "default": "",
                        "description": "当新EMQX 加入集群时，应重启的Erlang应用程序的列表。",
                        "label": "应用",
                        "readOnly": true,
                        "type": "comma_separated_string"
                    },
                    "etc_dir": {
                        "description": "<code>etc</code> 存放目录",
                        "label": "Etc 目录",
                        "readOnly": true,
                        "type": "string"
                    },
                    "cluster_call": {
                        "description": "cluster_call Description",
                        "label": "cluster_call",
                        "readOnly": true,
                        "$ref": "#/components/schemas/cluster.cluster_call"
                    },
                    "db_backend": {
                        "default": "rlog",
                        "description": " rlog是默认的数据库，他适用于大规模的集群。</br>mnesia是备选数据库，在小集群中提供了很好的性能。</br>      ",
                        "label": "内置数据库",
                        "readOnly": true,
                        "symbols": [
                            "mnesia",
                            "rlog"
                        ],
                        "type": "enum"
                    },
                    "db_role": {
                        "default": "core",
                        "description": "</br>选择节点的角色。</br><code>core</code> 节点提供数据的持久性，并负责写入。建议将核心节点放置在不同的机架或不同的可用区。</br><code>repliant</code> 节点是临时工作节点。 从集群中删除它们，不影响数据库冗余</br>建议复制节点多于核心节点。</br>注意：该参数仅在设置<code>backend</code>时生效到 <code>rlog</code>。</br>          ",
                        "label": "数据库角色",
                        "readOnly": true,
                        "symbols": [
                            "core",
                            "replicant"
                        ],
                        "type": "enum"
                    },
                    "rpc_module": {
                        "default": "gen_rpc",
                        "description": "集群间推送事务日志到复制节点使用的协议。",
                        "label": "RPC协议",
                        "readOnly": true,
                        "symbols": [
                            "gen_rpc",
                            "rpc"
                        ],
                        "type": "enum"
                    },
                    "tlog_push_mode": {
                        "default": "async",
                        "description": "同步模式下，核心节点等待复制节点的确认信息，然后再发送下一条事务日志。",
                        "label": "Tlog推送模式",
                        "readOnly": true,
                        "symbols": [
                            "sync",
                            "async"
                        ],
                        "type": "enum"
                    },
                    "default_shard_transport": {
                        "default": "gen_rpc",
                        "description": "</br>定义用于推送事务日志的默认传输。</br>这可以在 <code>db.shard_transports</code> 中基于每个分片被覆盖。</br><code>gen_rpc</code> 使用 <code>gen_rpc</code> 库，</br><code>distr</code> 使用 Erlang 发行版。</br>      ",
                        "label": "日志传输默认协议",
                        "symbols": [
                            "gen_rpc",
                            "distr"
                        ],
                        "type": "enum"
                    },
                    "shard_transports": {
                        "default": {},
                        "description": "</br>把事务日志复制到每个分片时的传输方法。</br><code>gen_rpc</code> 使用 <code>gen_rpc</code> 库，</br><code>distr</code> 使用 Erlang 发行版。</br>如果未指定，</br>默认是使用 <code>db.default_shard_transport</code> 中设置的值。</br>      ",
                        "label": "事务日志复制模式",
                        "properties": {
                            "$shard": {
                                "symbols": [
                                    "gen_rpc",
                                    "distr"
                                ],
                                "type": "enum"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "cluster.cluster_dns": {
                "properties": {
                    "name": {
                        "default": "localhost",
                        "description": "指定 DNS A 记录的名字。emqx 会通过访问这个 DNS A 记录来获取 IP 地址列表，</br>然后拼接 cluster.dns.app 里指定的 APP 名得到集群中所有节点的列表。</br>当 cluster.discovery_strategy 为 dns 时，此配置项才有效。</br>          ",
                        "label": "DNS名称",
                        "readOnly": true,
                        "type": "string"
                    },
                    "app": {
                        "default": "emqx",
                        "description": "用来与从 cluster.dns.name 获取的 IP 列表拼接得到节点名列表。</br>当 cluster.discovery_strategy 为 dns 时，此配置项才有效。</br>         ",
                        "label": "DNS前缀标识",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_connector_mongo.topology": {
                "properties": {
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "max_overflow": {
                        "default": 0,
                        "description": "最大溢出。",
                        "label": "最大溢出",
                        "minimum": 1,
                        "type": "number"
                    },
                    "overflow_ttl": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "overflow_check_period": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "local_threshold_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "connect_timeout_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "socket_timeout_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "server_selection_timeout_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "wait_queue_timeout_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "heartbeat_frequency_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "min_heartbeat_frequency_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "authn-redis.cluster": {
                "required": [
                    "database",
                    "redis_type",
                    "servers",
                    "cmd",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "redis"
                        ],
                        "type": "enum"
                    },
                    "cmd": {
                        "description": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
                        "label": "Command",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "servers": {
                        "description": "</br></br>集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`</br>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。</br>主机名具有以下形式：`Host[:Port]`。</br>如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "服务器列表",
                        "type": "array"
                    },
                    "redis_type": {
                        "description": "集群模式。",
                        "label": "集群模式",
                        "symbols": [
                            "cluster"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis 数据库 ID。",
                        "label": "数据库 ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "authn-jwt.hmac-based": {
                "required": [
                    "mechanism",
                    "secret",
                    "algorithm",
                    "use_jwks"
                ],
                "properties": {
                    "use_jwks": {
                        "description": "是否使用 JWKS。",
                        "label": "是否使用 JWKS",
                        "symbols": [
                            false
                        ],
                        "type": "enum"
                    },
                    "algorithm": {
                        "description": "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
                        "label": "JWT 签名算法",
                        "symbols": [
                            "hmac-based"
                        ],
                        "type": "enum"
                    },
                    "secret": {
                        "description": "使用 HMAC 算法时用于验证 JWT 的密钥",
                        "label": "Secret",
                        "type": "string"
                    },
                    "secret_base64_encoded": {
                        "default": false,
                        "description": "密钥是否为 Base64 编码。",
                        "label": "密钥是否为 Base64 编码",
                        "type": "boolean"
                    },
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "jwt"
                        ],
                        "type": "enum"
                    },
                    "acl_claim_name": {
                        "default": "acl",
                        "description": "JWT claim name to use for getting ACL rules.",
                        "label": "acl_claim_name",
                        "type": "string"
                    },
                    "verify_claims": {
                        "default": {},
                        "description": "</br>需要验证的自定义声明列表，它是一个名称/值对列表。</br>值可以使用以下占位符：</br>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名</br>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符</br>认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "Verify Claims",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "zone.flapping_detect": {
                "properties": {
                    "enable": {
                        "description": "启用抖动检测功能",
                        "label": "启用抖动检测",
                        "type": "boolean"
                    },
                    "max_count": {
                        "description": "MQTT 客户端在\"窗口\"时间内允许的最大断开次数",
                        "label": "最大断开次数",
                        "type": "number"
                    },
                    "window_time": {
                        "description": "抖动检测的时间窗口。",
                        "label": "时间窗口",
                        "type": "duration"
                    },
                    "ban_time": {
                        "description": "抖动的客户端将会被禁止登陆多长时间",
                        "label": "禁止登陆时长",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "zone.stats": {
                "properties": {
                    "enable": {
                        "description": "启用/禁用统计数据收集功能",
                        "label": "启用/禁用统计数据收集功能",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-mongodb.replica-set": {
                "required": [
                    "database",
                    "replica_set_name",
                    "servers",
                    "mongo_type",
                    "collection",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "mongodb"
                        ],
                        "type": "enum"
                    },
                    "collection": {
                        "description": "存储认证数据的集合。",
                        "label": "集合",
                        "type": "string"
                    },
                    "filter": {
                        "default": {},
                        "description": "</br>在查询中定义过滤条件的条件表达式。</br>过滤器支持如下占位符：</br>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名</br>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符</br>",
                        "label": "过滤器",
                        "type": "string"
                    },
                    "password_hash_field": {
                        "description": "文档中用于存放密码散列的字段。",
                        "label": "密码散列字段",
                        "type": "string"
                    },
                    "salt_field": {
                        "description": "文档中用于存放盐值的字段。",
                        "label": "盐值字段",
                        "type": "string"
                    },
                    "is_superuser_field": {
                        "description": "文档中用于定义用户是否具有超级用户权限的字段。",
                        "label": "超级用户字段",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "mongo_type": {
                        "default": "rs",
                        "description": "Replica set模式。",
                        "label": "Replica set模式",
                        "symbols": [
                            "rs"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "</br>集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`</br>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。</br>主机名具有以下形式：`Host[:Port]`。</br>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "服务器列表",
                        "type": "array"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "写模式。",
                        "label": "写模式",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "r_mode": {
                        "default": "master",
                        "description": "读模式。",
                        "label": "读模式",
                        "symbols": [
                            "master",
                            "slave_ok"
                        ],
                        "type": "enum"
                    },
                    "replica_set_name": {
                        "description": "副本集的名称。",
                        "label": "副本集名称",
                        "type": "string"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "使用 DNS SRV 记录。",
                        "label": "SRV 记录",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "与用户证书关联的数据库名称。",
                        "label": "认证源",
                        "type": "string"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "broker.zone": {
                "properties": {
                    "mqtt": {
                        "description": "Global MQTT configuration.</br>The configs here work as default values which can be overridden</br>in <code>zone</code> configs",
                        "label": "mqtt",
                        "$ref": "#/components/schemas/zone.mqtt"
                    },
                    "stats": {
                        "description": "Enable/disable statistic data collection.</br>Statistic data such as message receive/send count/rate etc. It provides insights of system performance and helps to diagnose issues. You can find statistic data from the dashboard, or from the '/stats' API.",
                        "label": "stats",
                        "$ref": "#/components/schemas/zone.stats"
                    },
                    "flapping_detect": {
                        "description": "This config controls the allowed maximum number of `CONNECT` packets received</br>from the same clientid in a time frame defined by `window_time`.</br>After the limit is reached, successive `CONNECT` requests are forbidden</br>(banned) until the end of the time period defined by `ban_time`.",
                        "label": "flapping_detect",
                        "$ref": "#/components/schemas/zone.flapping_detect"
                    },
                    "force_shutdown": {
                        "description": "When the process message queue length, or the memory bytes</br>reaches a certain value, the process is forced to close.</br></br>Note: \"message queue\" here refers to the \"message mailbox\"</br>of the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
                        "label": "force_shutdown",
                        "$ref": "#/components/schemas/zone.force_shutdown"
                    },
                    "conn_congestion": {
                        "description": "Settings for `conn_congestion` alarm.</br></br>Sometimes the MQTT connection (usually an MQTT subscriber) may</br>get \"congested\", because there are too many packets to be sent.</br>The socket tries to buffer the packets until the buffer is</br>full. If more packets arrive after that, the packets will be</br>\"pending\" in the queue, and we consider the connection</br>congested.</br></br>Note: `sndbuf` can be set to larger value if the</br>alarm is triggered too often.</br>The name of the alarm is of format `conn_congestion/<ClientID>/<Username>`,</br>where the `<ClientID>` is the client ID of the congested MQTT connection,</br>and `<Username>` is the username or `unknown_user`.",
                        "label": "conn_congestion",
                        "$ref": "#/components/schemas/zone.conn_congestion"
                    },
                    "force_gc": {
                        "description": "Force garbage collection in MQTT connection process after</br> they process certain number of messages or bytes of data.",
                        "label": "force_gc",
                        "$ref": "#/components/schemas/zone.force_gc"
                    },
                    "overload_protection": {
                        "description": "Overload protection mechanism monitors the load of the system and temporarily</br>disables some features (such as accepting new connections) when the load is high.",
                        "label": "overload_protection",
                        "$ref": "#/components/schemas/zone.overload_protection"
                    }
                },
                "type": "object"
            },
            "broker.persistent_session_builtin": {
                "properties": {
                    "type": {
                        "default": "builtin",
                        "description": "",
                        "label": "type",
                        "symbols": [
                            "builtin"
                        ],
                        "type": "enum"
                    },
                    "session": {
                        "description": "用于内建会话表的性能调优参数",
                        "label": "持久会话",
                        "$ref": "#/components/schemas/broker.persistent_table_mria_opts"
                    },
                    "session_messages": {
                        "description": "优化内置的会话消息表的配置。",
                        "label": "用于内建会话管理表的性能调优参数",
                        "$ref": "#/components/schemas/broker.persistent_table_mria_opts"
                    },
                    "messages": {
                        "description": "用于内建消息表的性能调优参数",
                        "label": "持久化消息",
                        "$ref": "#/components/schemas/broker.persistent_table_mria_opts"
                    }
                },
                "type": "object"
            },
            "authn-redis.standalone": {
                "required": [
                    "database",
                    "redis_type",
                    "server",
                    "cmd",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "redis"
                        ],
                        "type": "enum"
                    },
                    "cmd": {
                        "description": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
                        "label": "Command",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "server": {
                        "description": "</br>将要连接的 IPv4 或 IPv6 地址，或者主机名。</br>主机名具有以下形式：`Host[:Port]`。</br>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。</br>",
                        "label": "服务器地址",
                        "type": "ip_port"
                    },
                    "redis_type": {
                        "description": "单机模式。",
                        "label": "单机模式",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis 数据库 ID。",
                        "label": "数据库 ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "authn-jwt.public-key": {
                "required": [
                    "mechanism",
                    "algorithm",
                    "use_jwks"
                ],
                "properties": {
                    "use_jwks": {
                        "description": "是否使用 JWKS。",
                        "label": "是否使用 JWKS",
                        "symbols": [
                            false
                        ],
                        "type": "enum"
                    },
                    "algorithm": {
                        "description": "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
                        "label": "JWT 签名算法",
                        "symbols": [
                            "public-key"
                        ],
                        "type": "enum"
                    },
                    "public_key": {
                        "description": "用于验证 JWT 的公钥。",
                        "label": "公钥",
                        "type": "string"
                    },
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "jwt"
                        ],
                        "type": "enum"
                    },
                    "acl_claim_name": {
                        "default": "acl",
                        "description": "JWT claim name to use for getting ACL rules.",
                        "label": "acl_claim_name",
                        "type": "string"
                    },
                    "verify_claims": {
                        "default": {},
                        "description": "</br>需要验证的自定义声明列表，它是一个名称/值对列表。</br>值可以使用以下占位符：</br>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名</br>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符</br>认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "Verify Claims",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-redis.sentinel": {
                "required": [
                    "database",
                    "redis_type",
                    "servers",
                    "cmd",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "redis"
                        ],
                        "type": "enum"
                    },
                    "cmd": {
                        "description": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
                        "label": "Command",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "servers": {
                        "description": "</br></br>集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`</br>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。</br>主机名具有以下形式：`Host[:Port]`。</br>如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "服务器列表",
                        "type": "array"
                    },
                    "redis_type": {
                        "description": "哨兵模式。",
                        "label": "哨兵模式",
                        "symbols": [
                            "sentinel"
                        ],
                        "type": "enum"
                    },
                    "sentinel": {
                        "description": "Redis 哨兵模式下的集群名称。",
                        "label": "集群名称",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis 数据库 ID。",
                        "label": "数据库 ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "broker.ssl_client_opts": {
                "properties": {
                    "cacertfile": {
                        "description": "</br>受信任的PEM格式CA证书捆绑文件</br>此文件中的证书用于验证TLS对等方的证书。</br>如果要信任新CA，请将新证书附加到文件中。</br>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）</br>注意：从文件中失效（删除）证书不会影响已建立的连接。</br>",
                        "label": "CA 证书文件",
                        "type": "string"
                    },
                    "certfile": {
                        "description": "</br>PEM格式证书链文件</br>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，然后是直接颁发者证书，依此类推。</br>虽然根CA证书是可选的，但它应该放在</br>如果要添加文件，请将其删除。</br>",
                        "label": "证书文件",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "</br>PEM格式的私钥文件。</br>",
                        "label": "私钥文件",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "</br>启用或禁用对等验证。</br>",
                        "label": "对等验证",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "</br>启用 TLS 会话重用。</br>",
                        "label": "TLS 会话重用",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "</br>在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。因此，如果深度为0，则对等方必须由受信任的根CA直接签名；如果1，路径可以是PEER、CA、ROOT-CA；如果是2，则路径可以是PEER、CA、CA、ROOT-CA等等。默认值为10。</br>",
                        "label": "CA 证书深度",
                        "type": "number"
                    },
                    "password": {
                        "description": "</br>包含用户密码的字符串。</br>仅在私钥文件受密码保护时使用。</br>",
                        "label": "秘钥文件密码",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "</br>支持所有TLS/DTLS版本</br></br>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "SSL 版本",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "</br>此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如</br><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或</br><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。</br></br>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。</br>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。</br></br>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。</br>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式</br>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。</br>不兼容的密码套件将被自动删除。</br></br>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。</br></br></br>注：PSK 的 Ciphers 不支持 tlsv1.3</br>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。</br></br></br>PSK 密码套件：</br><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,</br>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,</br>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,</br>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code></br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "</br>用于查找预共享密钥（PSK）标识的 EMQX 内部回调。</br>",
                        "label": "SSL PSK 用户回调",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "</br>SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。</br>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。</br>",
                        "label": "SSL 重新协商",
                        "type": "boolean"
                    },
                    "enable": {
                        "default": false,
                        "description": "启用 TLS",
                        "label": "启用 TLS",
                        "type": "boolean"
                    },
                    "server_name_indication": {
                        "description": "</br>指定要在 TLS 服务器名称指示扩展中使用的主机名</br>例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，</br>例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时</br>如果未指定，它将默认为使用的主机名字符串</br>建立连接，除非使用 IP 地址</br>然后，主机名也用于对等机的主机名验证</br>证书</br>特殊值'disable'阻止发送服务器名称指示扩展，并禁用主机名验证检查。</br>",
                        "label": "服务器名称指示",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "disable"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "zone.overload_protection": {
                "properties": {
                    "enable": {
                        "description": "是否对系统过载做出反应",
                        "label": "是否对系统过载做出反应",
                        "type": "boolean"
                    },
                    "backoff_delay": {
                        "description": "一些不重要的任务可能会延迟执行，以毫秒为单位设置延迟",
                        "label": "延迟时间",
                        "minimum": 0,
                        "type": "number"
                    },
                    "backoff_gc": {
                        "description": "如有必要，跳过强制GC",
                        "label": "跳过GC",
                        "type": "boolean"
                    },
                    "backoff_hibernation": {
                        "description": "如有必要，跳过进程休眠",
                        "label": "跳过休眠",
                        "type": "boolean"
                    },
                    "backoff_new_conn": {
                        "description": "如有必要，关闭新进来的连接",
                        "label": "关闭新连接",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "broker.trace": {
                "properties": {
                    "payload_encode": {
                        "default": "text",
                        "description": "</br>确定跟踪文件中有效负载格式的格式</br>`text`：基于文本的协议或纯文本协议。</br>建议在有效负载为JSON编码时使用</br>`hex`：二进制十六进制编码。当有效负载是自定义二进制协议时，建议使用此选项</br>`hidden`：有效负载被模糊化为 `******`</br>",
                        "label": "有效负载编码",
                        "symbols": [
                            "hex",
                            "text",
                            "hidden"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-hash.other_algorithms": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Simple password hashing algorithm.",
                        "label": "name",
                        "symbols": [
                            "plain",
                            "md5",
                            "sha",
                            "sha256",
                            "sha512"
                        ],
                        "type": "enum"
                    },
                    "salt_position": {
                        "default": "prefix",
                        "description": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                        "label": "salt_position",
                        "symbols": [
                            "disable",
                            "prefix",
                            "suffix"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "cluster.cluster_call": {
                "properties": {
                    "retry_interval": {
                        "default": "1s",
                        "description": "当集群间调用出错时，多长时间重试一次。",
                        "label": "重试时间间隔",
                        "type": "duration"
                    },
                    "max_history": {
                        "default": 100,
                        "description": "集群间调用最多保留的历史记录数。只用于排错时查看。",
                        "label": "最大历史记录",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "number"
                    },
                    "cleanup_interval": {
                        "default": "5m",
                        "description": "清理过期事务的时间间隔",
                        "label": "清理间隔",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "cluster.log_rotation": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "启用日志轮换功能。启动后生成日志文件后缀会加上对应的索引数字，比如：log/emqx.log.1。</br>系统会默认生成<code>*.siz/*.idx<code>用于记录日志位置，请不要手动修改这两个文件。</br>",
                        "label": "日志轮换",
                        "type": "boolean"
                    },
                    "count": {
                        "default": 10,
                        "description": "轮换的最大日志文件数。",
                        "label": "最大日志文件数",
                        "maximum": 2048,
                        "minimum": 1,
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "broker.sysmon_vm": {
                "properties": {
                    "process_check_interval": {
                        "default": "30s",
                        "description": "定期进程限制检查的时间间隔。",
                        "label": "进程限制检查时间",
                        "type": "duration"
                    },
                    "process_high_watermark": {
                        "default": "80%",
                        "description": "在发出相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                        "label": "进程数高水位线",
                        "type": "percent"
                    },
                    "process_low_watermark": {
                        "default": "60%",
                        "description": "在清除相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                        "label": "进程数低水位线",
                        "type": "percent"
                    },
                    "long_gc": {
                        "description": "启用长垃圾回收监控",
                        "label": "启用长垃圾回收监控",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "long_schedule": {
                        "default": "240ms",
                        "description": "启用长调度监控",
                        "label": "启用长调度监控",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "large_heap": {
                        "default": "32MB",
                        "description": "启用大 heap 监控",
                        "label": "启用大 heap 监控",
                        "oneOf": [
                            {
                                "type": "byteSize"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "busy_dist_port": {
                        "default": true,
                        "description": "启用分布式端口过忙监控",
                        "label": "启用分布式端口过忙监控",
                        "type": "boolean"
                    },
                    "busy_port": {
                        "default": true,
                        "description": "启用端口过忙监控",
                        "label": "启用端口过忙监控",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "dashboard.listeners": {
                "properties": {
                    "http": {
                        "description": "TCP listeners",
                        "label": "http",
                        "$ref": "#/components/schemas/dashboard.http"
                    },
                    "https": {
                        "description": "SSL listeners",
                        "label": "https",
                        "$ref": "#/components/schemas/dashboard.https"
                    }
                },
                "type": "object"
            },
            "broker.alarm": {
                "properties": {
                    "actions": {
                        "default": [
                            "log",
                            "publish"
                        ],
                        "description": "警报激活时触发的动作。</br>目前，支持以下操作：<code>log</code> 和 <code>publish</code>.</br><code>log</code> 将告警写入日志 (控制台或者文件).</br><code>publish</code> 将告警作为 MQTT 消息发布到系统主题:</br><code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and</br><code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
                        "example": [
                            "log",
                            "publish"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "label": "告警动作",
                        "type": "array"
                    },
                    "size_limit": {
                        "default": 1000,
                        "description": "要保留为历史记录的已停用报警的最大总数。当超过此限制时，将删除最旧的停用报警，以限制总数。",
                        "example": 1000,
                        "label": "告警总数限制",
                        "maximum": 3000,
                        "minimum": 1,
                        "type": "number"
                    },
                    "validity_period": {
                        "default": "24h",
                        "description": "停用报警的保留时间。报警在停用时不会立即删除，而是在保留时间之后删除。",
                        "example": "24h",
                        "label": "告警保留时间",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "broker.persistent_session_store": {
                "properties": {
                    "enabled": {
                        "default": false,
                        "description": "使用数据库存储有关持久会话的信息。</br>这使得在节点停止时，可以将客户端连接迁移到另一个群集节点。",
                        "label": "启用持久会话保存",
                        "type": "boolean"
                    },
                    "on_disc": {
                        "default": true,
                        "description": "将持久会话数据保存在磁盘上。如果为 false 则存储在内存中。</br>如开启， 持久会话数据可在集群重启后恢复。</br>如关闭， 数据仅存储在内存中， 则在整个集群停止后丢失。",
                        "label": "持久化在磁盘上",
                        "type": "boolean"
                    },
                    "ram_cache": {
                        "default": false,
                        "description": "在内存中保持一份数据的副本，以便更快地访问。",
                        "label": "内存缓存",
                        "type": "boolean"
                    },
                    "backend": {
                        "default": {
                            "messages": {
                                "ram_cache": "false"
                            },
                            "session": {
                                "ram_cache": "true"
                            },
                            "session_messages": {
                                "ram_cache": "true"
                            },
                            "type": "builtin"
                        },
                        "description": "用于存储持久性会话和信息的数据库管理后端</br>- `builtin`: 使用内置的数据库（mria）",
                        "label": "后端类型",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/broker.persistent_session_builtin"
                            }
                        ]
                    },
                    "max_retain_undelivered": {
                        "default": "1h",
                        "description": "如果重新启动时处理上一个会话的节点已停止，则未传递到持久会话的消息在垃圾收集之前会被存储。",
                        "label": "未投递的消息保留条数",
                        "type": "duration"
                    },
                    "message_gc_interval": {
                        "default": "1h",
                        "description": "将未送达的消息垃圾收集到持久会话的开始间隔。</br>这会影响检查 \"max_retain_undelivered\"（最大保留未送达）的删除频率。",
                        "label": "消息清理间隔",
                        "type": "duration"
                    },
                    "session_message_gc_interval": {
                        "default": "1m",
                        "description": "持久会话消息的临时数据垃圾收集的开始间隔。</br>这不会影响持久会话消息的生命周期长度。</br>",
                        "label": "会话消息清理间隔",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "authn-http.get": {
                "required": [
                    "url",
                    "backend",
                    "mechanism",
                    "method"
                ],
                "properties": {
                    "method": {
                        "default": "post",
                        "description": "HTTP 请求方法。",
                        "label": "请求方法",
                        "symbols": [
                            "get"
                        ],
                        "type": "enum"
                    },
                    "headers": {
                        "default": {
                            "accept": "application/json",
                            "cache-control": "no-cache",
                            "connection": "keep-alive",
                            "keep-alive": "timeout=30, max=1000"
                        },
                        "description": "HTTP Headers 列表 (无 <code>content-type</code>) 。",
                        "label": "请求头(无 content-type)",
                        "type": "string"
                    },
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "http"
                        ],
                        "type": "enum"
                    },
                    "url": {
                        "description": "认证 HTTP 服务器地址。",
                        "label": "URL",
                        "type": "string"
                    },
                    "body": {
                        "description": "HTTP request body。",
                        "label": "Request Body",
                        "type": "string"
                    },
                    "request_timeout": {
                        "default": "5s",
                        "description": "HTTP 请求超时时长。",
                        "label": "请求超时时间",
                        "type": "duration"
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "连接HTTP服务器的超时时间。",
                        "label": "连接超时",
                        "type": "duration"
                    },
                    "enable_pipelining": {
                        "default": true,
                        "description": "允许HTTP管道。",
                        "label": "HTTP管道",
                        "type": "boolean"
                    },
                    "max_retries": {
                        "default": 5,
                        "description": "请求出错时的最大重试次数。",
                        "label": "最大重试次数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "request": {
                        "description": "</br>如果提供了请求，调用者可以通过以下方式发送 HTTP 请求</br><code>emqx_resource:query(ResourceId, {send_message, BridgeId, Message})</code></br>",
                        "label": "HTTP 请求",
                        "$ref": "#/components/schemas/connector-http.request"
                    },
                    "retry_interval": {
                        "default": "1s",
                        "description": "重试之间的间隔时间。",
                        "label": "重试间隔",
                        "type": "duration"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "broker.broker": {
                "properties": {
                    "enable_session_registry": {
                        "default": true,
                        "description": "是否启用 Session Registry",
                        "label": "enable_session_registry",
                        "type": "boolean"
                    },
                    "session_locking_strategy": {
                        "default": "quorum",
                        "description": "Session 在集群中的锁策略。</br>  - `loca`: 仅锁本节点的 Session</br>  - `one`: 任选一个其它节点加锁</br>  - `quorum`: 选择集群中半数以上的节点加锁</br>  - `all`: 选择所有节点加锁</br>",
                        "label": "session_locking_strategy",
                        "symbols": [
                            "local",
                            "leader",
                            "quorum",
                            "all"
                        ],
                        "type": "enum"
                    },
                    "shared_subscription_strategy": {
                        "default": "round_robin",
                        "description": "共享订阅消息派发策略。</br>  - `random`: 随机挑选一个共享订阅者派发</br>  - `round_robin`: 使用 round-robin 策略派发</br>  - `sticky`: 总是使用上次选中的订阅者派发，直到它断开连接</br>  - `hash`: 使用发送者的 Client ID 进行 Hash 来选择订阅者</br>",
                        "label": "shared_subscription_strategy",
                        "symbols": [
                            "random",
                            "round_robin",
                            "sticky",
                            "local",
                            "hash_topic",
                            "hash_clientid"
                        ],
                        "type": "enum"
                    },
                    "shared_dispatch_ack_enabled": {
                        "default": false,
                        "description": "启用/禁用 QoS 1 和 QoS 2 消息的共享派发确认。</br>开启后，允许将消息从未及时回复 ACK 的订阅者 （例如，客户端离线）重新派发给另外一个订阅者。</br>",
                        "label": "shared_dispatch_ack_enabled",
                        "type": "boolean"
                    },
                    "route_batch_clean": {
                        "default": true,
                        "description": "是否开启批量清除路由。",
                        "label": "route_batch_clean",
                        "type": "boolean"
                    },
                    "perf": {
                        "description": "perf Description",
                        "label": "perf",
                        "$ref": "#/components/schemas/broker.broker_perf"
                    },
                    "shared_subscription_group": {
                        "description": "shared_subscription_group Description",
                        "label": "shared_subscription_group",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/broker.shared_subscription_group"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "limiter.client_bucket": {
                "properties": {
                    "rate": {
                        "default": "infinity",
                        "description": "桶的令牌生成速率",
                        "label": "速率",
                        "type": "string"
                    },
                    "initial": {
                        "default": "0",
                        "description": "桶中的初始令牌数",
                        "label": "初始令牌数",
                        "type": "string"
                    },
                    "low_watermark": {
                        "default": "0",
                        "description": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                        "label": "低水位线",
                        "type": "string"
                    },
                    "capacity": {
                        "default": "infinity",
                        "description": "每个使用者的令牌容量上限",
                        "label": "容量",
                        "type": "string"
                    },
                    "divisible": {
                        "default": false,
                        "description": "申请的令牌数是否可以被分割",
                        "label": "是否可分割",
                        "type": "boolean"
                    },
                    "max_retry_time": {
                        "default": "10s",
                        "description": "申请失败后，尝试重新申请的时长最大值",
                        "label": "最大重试时间",
                        "type": "duration"
                    },
                    "failure_strategy": {
                        "default": "force",
                        "description": "当所有的重试都失败后的处理策略",
                        "label": "失败策略",
                        "symbols": [
                            "force",
                            "drop",
                            "throw"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-postgresql.authentication": {
                "required": [
                    "database",
                    "server",
                    "query",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "postgresql"
                        ],
                        "type": "enum"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "query": {
                        "description": "用于查询密码散列等用于认证的数据的 SQL 语句。",
                        "label": "查询语句",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "server": {
                        "description": "</br>将要连接的 IPv4 或 IPv6 地址，或者主机名。</br>主机名具有以下形式：`Host[:Port]`。</br>如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。</br>",
                        "label": "服务器地址",
                        "type": "ip_port"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "authn-jwt.jwks": {
                "required": [
                    "mechanism",
                    "endpoint",
                    "use_jwks"
                ],
                "properties": {
                    "use_jwks": {
                        "description": "是否使用 JWKS。",
                        "label": "是否使用 JWKS",
                        "symbols": [
                            true
                        ],
                        "type": "enum"
                    },
                    "endpoint": {
                        "description": "JWKS 端点, 它是一个以 JWKS 格式返回服务端的公钥集的只读端点。",
                        "label": "JWKS Endpoint",
                        "type": "string"
                    },
                    "refresh_interval": {
                        "default": 300,
                        "description": "JWKS 刷新间隔。",
                        "label": "JWKS 刷新间隔",
                        "type": "number"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL 选项。",
                        "label": "SSL 选项",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-jwt.ssl_disable"
                            },
                            {
                                "$ref": "#/components/schemas/authn-jwt.ssl_enable"
                            }
                        ]
                    },
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "jwt"
                        ],
                        "type": "enum"
                    },
                    "acl_claim_name": {
                        "default": "acl",
                        "description": "JWT claim name to use for getting ACL rules.",
                        "label": "acl_claim_name",
                        "type": "string"
                    },
                    "verify_claims": {
                        "default": {},
                        "description": "</br>需要验证的自定义声明列表，它是一个名称/值对列表。</br>值可以使用以下占位符：</br>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名</br>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符</br>认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "Verify Claims",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-mongodb.standalone": {
                "required": [
                    "database",
                    "server",
                    "mongo_type",
                    "collection",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "mongodb"
                        ],
                        "type": "enum"
                    },
                    "collection": {
                        "description": "存储认证数据的集合。",
                        "label": "集合",
                        "type": "string"
                    },
                    "filter": {
                        "default": {},
                        "description": "</br>在查询中定义过滤条件的条件表达式。</br>过滤器支持如下占位符：</br>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名</br>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符</br>",
                        "label": "过滤器",
                        "type": "string"
                    },
                    "password_hash_field": {
                        "description": "文档中用于存放密码散列的字段。",
                        "label": "密码散列字段",
                        "type": "string"
                    },
                    "salt_field": {
                        "description": "文档中用于存放盐值的字段。",
                        "label": "盐值字段",
                        "type": "string"
                    },
                    "is_superuser_field": {
                        "description": "文档中用于定义用户是否具有超级用户权限的字段。",
                        "label": "超级用户字段",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "mongo_type": {
                        "default": "single",
                        "description": "Standalone模式。",
                        "label": "Standalone模式",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "</br>将要连接的 IPv4 或 IPv6 地址，或者主机名。</br>主机名具有以下形式：`Host[:Port]`。</br>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。</br>",
                        "label": "服务器地址",
                        "type": "ip_port"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "写模式。",
                        "label": "写模式",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "使用 DNS SRV 记录。",
                        "label": "SRV 记录",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "与用户证书关联的数据库名称。",
                        "label": "认证源",
                        "type": "string"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "authn-hash.bcrypt": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "BCRYPT password hashing.",
                        "label": "name",
                        "symbols": [
                            "bcrypt"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-jwt.ssl_disable": {
                "properties": {
                    "enable": {
                        "description": "启用/禁用 SSL。",
                        "label": "启用/禁用 SSL",
                        "symbols": [
                            false
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "broker.broker_perf": {
                "properties": {
                    "route_lock_type": {
                        "default": "key",
                        "description": "通配主题订阅/取消订阅性能调优。</br>建议仅当通配符主题较多时才更改此参数。</br></br>注：当从/更改为 `global` 锁时，它要求集群中的所有节点在更改之前停止。</br>  - `key`: 为 Mnesia 事务涉及到的每个 key 上锁，建议单节点时使用。</br>  - `tab`: 为 Mnesia 事务涉及到的表上锁，建议在集群中使用。</br>  - `global`: 所以更新操作都被全局的锁保护，仅建议在超大规模集群中使用。</br>",
                        "label": "route_lock_type",
                        "symbols": [
                            "key",
                            "tab",
                            "global"
                        ],
                        "type": "enum"
                    },
                    "trie_compaction": {
                        "default": true,
                        "description": "是否开启主题表压缩存储。</br>启用它会显着提高通配符主题订阅率，如果通配符主题具有唯一前缀，例如：'sensor/{{id}}/+/'，其中每个订阅者的 ID 是唯一的。</br>如果消息主要发布到具有大量级别的主题，则主题匹配性能（发布时）可能会降低。</br></br>注意：这是一个集群范围的配置。 它要求在更改之前停止所有节点。</br>",
                        "label": "trie_compaction",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "broker.mqtt_ws_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/broker.tcp_opts"
                    },
                    "websocket": {
                        "description": "websocket Description",
                        "label": "websocket",
                        "$ref": "#/components/schemas/broker.ws_opts"
                    },
                    "bind": {
                        "description": "</br>监听套接字的 IP 地址和端口。</br>",
                        "label": "IP 地址和端口",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "监听器接收池的大小。",
                        "label": "接收器数量",
                        "type": "string"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "</br>监听器允许的最大并发连接数。</br>",
                        "label": "最大并发连接数",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "</br>发布或订阅时，请在所有主题前面加上 mountpoint 字符串。</br></br>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。</br></br>例如，如果客户机 A 使用 <code>listeners.tcp.<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。</br>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息</br></br>设置为<code>\"\"</code> 以禁用该功能</br></br>mountpoint 字符串中的变量：</br>- <code>${clientid}</code>: clientid</br>- <code>${username}</code>: username</br>",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "</br>监听器所属的配置组。</br>",
                        "label": "配置组",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "</br>速率限制类型</br>",
                        "label": "速率限制类型",
                        "properties": {
                            "$ratelimit_name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "此监听器的访问控制规则。",
                        "items": {
                            "type": "string"
                        },
                        "label": "访问控制规则",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "</br>如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 </br>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/</br>",
                        "label": "Proxy protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "</br>代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。</br>",
                        "label": "Proxy protocol 超时时间",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "</br>监听器认证重载。</br></br>认证配置可以是单个认证器实例，也可以是一个认证器数组组成的认证链。</br>执行登录验证时（用户名、客户端 ID 等），将按配置的顺序执行</br>",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "每个监听器的认证覆盖",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "cluster.cluster": {
                "properties": {
                    "name": {
                        "default": "emqxcl",
                        "description": "EMQX集群名称。每个集群都有一个唯一的名称。服务发现时会用于做路径的一部分。",
                        "label": "集群名称",
                        "readOnly": true,
                        "type": "string"
                    },
                    "discovery_strategy": {
                        "default": "manual",
                        "description": "集群节点发现方式。可选值为:</br>- manual: 手动加入集群</br>- static: 配置静态节点。配置几个固定的节点，新节点通过连接固定节点中的某一个来加入集群。</br>- mcast: 使用 UDP 多播的方式发现节点。</br>- dns: 使用 DNS A 记录的方式发现节点。</br>- etcd: 使用 etcd 发现节点。</br>- k8s: 使用 Kubernetes 发现节点。</br>           ",
                        "label": "集群服务发现策略",
                        "readOnly": true,
                        "symbols": [
                            "manual",
                            "static",
                            "mcast",
                            "dns",
                            "etcd",
                            "k8s"
                        ],
                        "type": "enum"
                    },
                    "core_nodes": {
                        "default": "",
                        "description": "当前节点连接的核心节点列表。</br>注意：该参数仅在设置<code>backend</code>时生效到 <code>rlog</code></br>并且设置<code>role</code>为<code>replicant</code>时生效。</br>该值需要在手动或静态集群发现机制下设置。</br>如果使用了自动集群发现机制（如<code>etcd</code>），则不需要设置该值。</br>          ",
                        "label": "数据库核心节点",
                        "readOnly": true,
                        "type": "comma_separated_string"
                    },
                    "autoclean": {
                        "default": "5m",
                        "description": "指定多久之后从集群中删除离线节点。",
                        "label": "自动删除离线节点时间",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "autoheal": {
                        "default": true,
                        "description": "集群脑裂自动恢复机制开关。",
                        "label": "节点脑裂自动修复机制",
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "proto_dist": {
                        "default": "inet_tcp",
                        "description": "分布式 Erlang 集群协议类型。可选值为:</br>- inet_tcp: 使用 IPv4 </br>- inet6_tcp 使用 IPv6 </br>- inet_tls: 使用 TLS，需要与 node.ssl_dist_optfile 配置一起使用。</br>         ",
                        "label": "集群内部通信协议",
                        "readOnly": true,
                        "symbols": [
                            "inet_tcp",
                            "inet6_tcp",
                            "inet_tls"
                        ],
                        "type": "enum"
                    },
                    "static": {
                        "description": "static Description",
                        "label": "static",
                        "$ref": "#/components/schemas/cluster.cluster_static"
                    },
                    "mcast": {
                        "description": "mcast Description",
                        "label": "mcast",
                        "$ref": "#/components/schemas/cluster.cluster_mcast"
                    },
                    "dns": {
                        "description": "dns Description",
                        "label": "dns",
                        "$ref": "#/components/schemas/cluster.cluster_dns"
                    },
                    "etcd": {
                        "description": "etcd Description",
                        "label": "etcd",
                        "$ref": "#/components/schemas/cluster.cluster_etcd"
                    },
                    "k8s": {
                        "description": "k8s Description",
                        "label": "k8s",
                        "$ref": "#/components/schemas/cluster.cluster_k8s"
                    }
                },
                "type": "object"
            },
            "zone.mqtt": {
                "properties": {
                    "idle_timeout": {
                        "description": "TCP 连接建立后，如果在 <code>idle_timeout</code> 指定的时间内未收到客户端的 MQTT CONNECT 报文，则连接将被断开。",
                        "label": "空闲超时",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "max_packet_size": {
                        "description": "允许的最大 MQTT 报文大小。",
                        "label": "最大报文大小",
                        "type": "byteSize"
                    },
                    "max_clientid_len": {
                        "description": "允许的最大 MQTT Client ID 长度。",
                        "label": "最大 Client ID 长度",
                        "maximum": 65535,
                        "minimum": 23,
                        "type": "number"
                    },
                    "max_topic_levels": {
                        "description": "允许的最大主题层级。",
                        "label": "最大主题层级",
                        "maximum": 65535,
                        "minimum": 1,
                        "type": "number"
                    },
                    "max_qos_allowed": {
                        "description": "允许的最大 QoS 等级。",
                        "label": "最大 QoS",
                        "symbols": [
                            0,
                            1,
                            2
                        ],
                        "type": "enum"
                    },
                    "max_topic_alias": {
                        "description": "允许的最大主题别名数，0 表示不支持主题别名。",
                        "label": "最大主题别名",
                        "maximum": 65535,
                        "minimum": 0,
                        "type": "number"
                    },
                    "retain_available": {
                        "description": "是否启用对 MQTT 保留消息的支持。",
                        "label": "保留消息可用",
                        "type": "boolean"
                    },
                    "wildcard_subscription": {
                        "description": "是否启用对 MQTT 通配符订阅的支持。",
                        "label": "通配符订阅可用",
                        "type": "boolean"
                    },
                    "shared_subscription": {
                        "description": "是否启用对 MQTT 共享订阅的支持。",
                        "label": "共享订阅可用",
                        "type": "boolean"
                    },
                    "ignore_loop_deliver": {
                        "description": "是否为 MQTT v3.1.1/v3.1.0 客户端忽略投递自己发布的消息，类似于 MQTT 5.0 中的 <code>No Local</code> 订阅选项",
                        "label": "忽略循环投递",
                        "type": "boolean"
                    },
                    "strict_mode": {
                        "description": "是否以严格模式解析 MQTT 消息。</br>当设置为 true 时，例如客户端 ID、主题名称等中的无效 utf8 字符串将导致客户端断开连接。",
                        "label": "严格模式",
                        "type": "boolean"
                    },
                    "response_information": {
                        "description": "指定返回给客户端的响应信息。如果设置为 \"\"，则禁用此功能。仅适用于使用 MQTT 5.0 协议的客户端。",
                        "label": "响应信息",
                        "type": "string"
                    },
                    "server_keepalive": {
                        "description": "EMQX 要求客户端使用的保活时间，配置为 <code>disabled</code> 表示将使用客户端指定的保活时间。需要用到 MQTT 5.0 中的 <code>Server Keep Alive</code>，因此仅适用于使用 MQTT 5.0 协议的客户端。",
                        "label": "服务端保持连接",
                        "oneOf": [
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "number"
                            }
                        ]
                    },
                    "keepalive_backoff": {
                        "description": "Broker 判定客户端保活超时使用的退避乘数。如果 EMQX 在 <code>Keep Alive * Backoff * 2</code> 秒内未收到任何报文，EMQX 将关闭当前连接。",
                        "label": "保持连接退避乘数",
                        "type": "number"
                    },
                    "max_subscriptions": {
                        "description": "允许每个客户端建立的最大订阅数量。",
                        "label": "最大订阅数量",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "upgrade_qos": {
                        "description": "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
                        "label": "升级 QoS",
                        "type": "boolean"
                    },
                    "max_inflight": {
                        "description": "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
                        "label": "最大飞行窗口",
                        "maximum": 65535,
                        "minimum": 1,
                        "type": "number"
                    },
                    "retry_interval": {
                        "description": "QoS 1/2 消息的重新投递间隔。",
                        "label": "重试间隔",
                        "type": "duration"
                    },
                    "max_awaiting_rel": {
                        "description": "PUBREL (Client -> Broker) 最大等待队列长度。",
                        "label": "Max Awaiting PUBREL",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "number"
                            }
                        ]
                    },
                    "await_rel_timeout": {
                        "description": "PUBREL (Client -> Broker) 最大等待时间，超时则会被丢弃。",
                        "label": "Max Awaiting PUBREL TIMEOUT",
                        "type": "duration"
                    },
                    "session_expiry_interval": {
                        "description": "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。",
                        "label": "会话过期间隔",
                        "type": "duration"
                    },
                    "max_mqueue_len": {
                        "description": "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
                        "label": "最大消息队列长度",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "mqueue_priorities": {
                        "description": "主题优先级。取值范围 [1-255]</br>默认优先级表为空，即所有的主题优先级相同。</br></br>注：优先主题名称中不支持使用逗号和等号。</br>注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置</br></br>示例：</br>配置 <code>\"topic/1\" > \"topic/2\"</code>:</br><code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code></br>",
                        "label": "主题优先级",
                        "oneOf": [
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "mqueue_default_priority": {
                        "description": "默认的主题优先级，不在 <code>主题优先级</code>（<code>mqueue_priorities</code>） 中的主题将会使用该优先级。",
                        "label": "默认主题优先级",
                        "symbols": [
                            "highest",
                            "lowest"
                        ],
                        "type": "enum"
                    },
                    "mqueue_store_qos0": {
                        "description": "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
                        "label": "存储 QoS 0 消息",
                        "type": "boolean"
                    },
                    "use_username_as_clientid": {
                        "description": "是否使用用户名作为客户端 ID。</br>此设置的作用时间晚于 <code>使用对端证书作为用户名</code>（<code>peer_cert_as_username</code>） 和 <code>使用对端证书作为客户端 ID</code>（<code>peer_cert_as_clientid</code>）。</br>",
                        "label": "使用用户名作为客户端 ID",
                        "type": "boolean"
                    },
                    "peer_cert_as_username": {
                        "description": "使用对端证书中的 CN, DN 字段或整个证书内容来作为用户名。仅适用于 TLS 连接。</br>目前支持配置为以下内容：</br>- <code>cn</code>: 取证书的 CN 字段作为 Username</br>- <code>dn</code>: 取证书的 DN 字段作为 Username</br>- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容作为 Username</br>- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式后作为 Username</br>- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容的 MD5 值作为 Username</br>",
                        "label": "使用对端证书作为用户名",
                        "symbols": [
                            "disabled",
                            "cn",
                            "dn",
                            "crt",
                            "pem",
                            "md5"
                        ],
                        "type": "enum"
                    },
                    "peer_cert_as_clientid": {
                        "description": "使用对端证书中的 CN, DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接。</br>目前支持配置为以下内容：</br>- <code>cn</code>: 取证书的 CN 字段作为 Client ID</br>- <code>dn</code>: 取证书的 DN 字段作为 Client ID</br>- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容作为 Client ID</br>- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式后作为 Client ID</br>- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容的 MD5 值作为 Client ID</br>",
                        "label": "使用对端证书作为客户端 ID",
                        "symbols": [
                            "disabled",
                            "cn",
                            "dn",
                            "crt",
                            "pem",
                            "md5"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-scram-builtin_db.authentication": {
                "required": [
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "scram"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "built_in_database"
                        ],
                        "type": "enum"
                    },
                    "algorithm": {
                        "default": "sha256",
                        "description": "Hashing algorithm.",
                        "label": "algorithm",
                        "symbols": [
                            "sha256",
                            "sha512"
                        ],
                        "type": "enum"
                    },
                    "iteration_count": {
                        "default": 4096,
                        "description": "Iteration count.",
                        "label": "iteration_count",
                        "minimum": 1,
                        "type": "number"
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "cluster.log_overload_kill": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "日志处理进程过载时为保护自己节点其它的业务能正常，强制杀死日志处理进程。",
                        "label": "日志处理进程过载保护",
                        "type": "boolean"
                    },
                    "mem_size": {
                        "default": "30MB",
                        "description": "处理进程允许使用的最大内存。",
                        "label": "处理进程允许使用的最大内存",
                        "type": "byteSize"
                    },
                    "qlen": {
                        "default": 20000,
                        "description": "允许的最大队列长度。",
                        "label": "最大队列长度",
                        "type": "string"
                    },
                    "restart_after": {
                        "default": "5s",
                        "description": "如果处理进程终止，它会在以指定的时间后后自动重新启动。 `infinity` 不自动重启。",
                        "label": "处理进程重启机制",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "duration"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "zone.conn_congestion": {
                "properties": {
                    "enable_alarm": {
                        "description": "启用或者禁用连接阻塞告警功能",
                        "label": "启用/禁用阻塞告警",
                        "type": "boolean"
                    },
                    "min_alarm_sustain_duration": {
                        "description": "清除警报前的最短时间。</br></br>只有当队列中没有挂起的数据，并且连接至少被堵塞了 \"min_alarm_sustain_duration\" 毫秒时，</br>报警才会被清除。这是为了避免太频繁地清除和再次发出警报.",
                        "label": "告警维持时间",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "broker.mqtt_quic_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "enabled": {
                        "default": true,
                        "description": "启用 QUIC 监听器",
                        "label": "启用 QUIC 监听器",
                        "type": "boolean"
                    },
                    "certfile": {
                        "description": "证书文件",
                        "label": "证书文件",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "私钥文件",
                        "label": "私钥文件",
                        "type": "string"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256"
                        ],
                        "description": "</br>此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如</br><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或</br><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。</br></br>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。</br>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。</br></br>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。</br>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式</br>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。</br>不兼容的密码套件将被自动删除。</br></br>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。</br></br></br>注：PSK 的 Ciphers 不支持 tlsv1.3</br>如果打算使用PSK密码套件，<code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。</br></br></br>PSK 密码套件：</br><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,</br>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,</br>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,</br>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code></br></br>注：QUIC 监听器不支持 tlsv1.3 的 ciphers</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "",
                        "type": "array"
                    },
                    "idle_timeout": {
                        "default": "15s",
                        "description": "</br>关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。</br>",
                        "label": "发呆超时时间",
                        "type": "duration"
                    },
                    "bind": {
                        "description": "</br>监听套接字的 IP 地址和端口。</br>",
                        "label": "IP 地址和端口",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "监听器接收池的大小。",
                        "label": "接收器数量",
                        "type": "string"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "</br>监听器允许的最大并发连接数。</br>",
                        "label": "最大并发连接数",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "</br>发布或订阅时，请在所有主题前面加上 mountpoint 字符串。</br></br>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。</br></br>例如，如果客户机 A 使用 <code>listeners.tcp.<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。</br>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息</br></br>设置为<code>\"\"</code> 以禁用该功能</br></br>mountpoint 字符串中的变量：</br>- <code>${clientid}</code>: clientid</br>- <code>${username}</code>: username</br>",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "</br>监听器所属的配置组。</br>",
                        "label": "配置组",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "</br>速率限制类型</br>",
                        "label": "速率限制类型",
                        "properties": {
                            "$ratelimit_name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "limiter.limiter": {
                "properties": {
                    "bytes_in": {
                        "default": {
                            "enable": false
                        },
                        "description": "流入字节率控制器.</br>这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                        "label": "流入字节率",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "message_in": {
                        "default": {
                            "enable": false
                        },
                        "description": "流入速率控制器。</br>这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                        "label": "消息流入速率",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "connection": {
                        "default": {
                            "enable": false
                        },
                        "description": "连接速率控制器。</br>这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                        "label": "连接速率",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "message_routing": {
                        "default": {
                            "enable": false
                        },
                        "description": "消息派发速率控制器。</br>这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                        "label": "消息派发",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "batch": {
                        "default": {
                            "enable": false
                        },
                        "description": "批量操作速率控制器。</br>这是给 EMQX 内部的批量操作使用的，比如用来控制保留消息的派发速率",
                        "label": "批量操作",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    }
                },
                "type": "object"
            },
            "broker.ws_opts": {
                "properties": {
                    "mqtt_path": {
                        "default": "/mqtt",
                        "description": "</br>WebSocket 的 MQTT 协议路径。因此，EMQX Broker的WebSocket地址为：</br><code>ws://{ip}:{port}/mqtt</code></br>",
                        "label": "WS MQTT 路径",
                        "type": "string"
                    },
                    "mqtt_piggyback": {
                        "default": "multiple",
                        "description": "</br>WebSocket消息是否允许包含多个 MQTT 数据包。</br>",
                        "label": "MQTT Piggyback",
                        "symbols": [
                            "single",
                            "multiple"
                        ],
                        "type": "enum"
                    },
                    "compress": {
                        "default": false,
                        "description": "</br>如果 <code>true</code>，则使用<code>zlib</code> 压缩 WebSocket 消息</br><code>deflate_opts</code> 下的配置项属于压缩相关参数配置。</br>",
                        "label": "Ws 压缩",
                        "type": "boolean"
                    },
                    "idle_timeout": {
                        "default": "15s",
                        "description": "</br>关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。</br>",
                        "label": "发呆超时时间",
                        "type": "duration"
                    },
                    "max_frame_size": {
                        "default": "infinity",
                        "description": "</br>单个 MQTT 数据包的最大长度。</br>",
                        "label": "最大数据包长度",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "fail_if_no_subprotocol": {
                        "default": true,
                        "description": "</br>如果<code>true</code>，当客户端未携带<code>Sec WebSocket Protocol</code>字段时，服务器将返回一个错误。</br></br>注意：微信小程序需要禁用此验证。</br>",
                        "label": "无 subprotocol 则失败",
                        "type": "boolean"
                    },
                    "supported_subprotocols": {
                        "default": "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5",
                        "description": "</br>逗号分隔的 subprotocols 支持列表。</br>",
                        "label": "Subprotocols 支持列表",
                        "type": "comma_separated_string"
                    },
                    "check_origin_enable": {
                        "default": false,
                        "description": "</br>如果<code>true</code>，<code>origin</code>HTTP 头将根据<code>check_origins</code>参数中配置的允许来源列表进行验证。</br>",
                        "label": "检查 origin",
                        "type": "boolean"
                    },
                    "allow_origin_absence": {
                        "default": true,
                        "description": "</br>If <code>false</code> and <code>check_origin_enable</code> is <code>true</code>, the server will reject requests that don't have <code>origin</code> HTTP header.</br>",
                        "label": "允许 origin 缺失",
                        "type": "boolean"
                    },
                    "check_origins": {
                        "default": "",
                        "description": "</br>允许的 origins 列表</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "允许的 origins",
                        "type": "array"
                    },
                    "proxy_address_header": {
                        "default": "x-forwarded-for",
                        "description": "</br>HTTP 头，用于传递有关客户端 IP 地址的信息。</br>当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。</br>",
                        "label": "客户端地址头",
                        "type": "string"
                    },
                    "proxy_port_header": {
                        "default": "x-forwarded-port",
                        "description": "</br>HTTP 头，用于传递有关客户端端口的信息。</br>当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。</br>",
                        "label": "客户端端口头",
                        "type": "string"
                    },
                    "deflate_opts": {
                        "description": "deflate_opts Description",
                        "label": "deflate_opts",
                        "$ref": "#/components/schemas/broker.deflate_opts"
                    }
                },
                "type": "object"
            },
            "dashboard.https": {
                "required": [
                    "bind",
                    "enable"
                ],
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "忽略或启用该监听器配置",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "bind": {
                        "default": 18804,
                        "description": "监听的地址与端口，在dashboard更新此配置时，会重启dashboard服务。",
                        "label": "绑定端口",
                        "oneOf": [
                            {
                                "type": "ip_port"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "num_acceptors": {
                        "default": 4,
                        "description": "TCP协议的Socket acceptor池大小",
                        "label": "Acceptor 数量",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": 512,
                        "description": "同时处理的最大连接数",
                        "label": "最大连接数",
                        "type": "number"
                    },
                    "backlog": {
                        "default": 1024,
                        "description": "排队等待连接的队列的最大长度",
                        "label": "排队长度",
                        "type": "number"
                    },
                    "send_timeout": {
                        "default": "5s",
                        "description": "Socket发送超时时间",
                        "label": "发送超时时间",
                        "type": "duration"
                    },
                    "inet6": {
                        "default": false,
                        "description": "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致仪表盘无法使用。",
                        "label": "IPv6",
                        "type": "boolean"
                    },
                    "ipv6_v6only": {
                        "default": false,
                        "description": "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
                        "label": "IPv6 only",
                        "type": "boolean"
                    },
                    "cacertfile": {
                        "description": "</br>受信任的PEM格式CA证书捆绑文件</br>此文件中的证书用于验证TLS对等方的证书。</br>如果要信任新CA，请将新证书附加到文件中。</br>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）</br>注意：从文件中失效（删除）证书不会影响已建立的连接。</br>",
                        "label": "CA 证书文件",
                        "type": "string"
                    },
                    "certfile": {
                        "description": "</br>PEM格式证书链文件</br>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，然后是直接颁发者证书，依此类推。</br>虽然根CA证书是可选的，但它应该放在</br>如果要添加文件，请将其删除。</br>",
                        "label": "证书文件",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "</br>PEM格式的私钥文件。</br>",
                        "label": "私钥文件",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "</br>启用或禁用对等验证。</br>",
                        "label": "对等验证",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "</br>启用 TLS 会话重用。</br>",
                        "label": "TLS 会话重用",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "</br>在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。因此，如果深度为0，则对等方必须由受信任的根CA直接签名；如果1，路径可以是PEER、CA、ROOT-CA；如果是2，则路径可以是PEER、CA、CA、ROOT-CA等等。默认值为10。</br>",
                        "label": "CA 证书深度",
                        "type": "number"
                    },
                    "password": {
                        "description": "</br>包含用户密码的字符串。</br>仅在私钥文件受密码保护时使用。</br>",
                        "label": "秘钥文件密码",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "</br>支持所有TLS/DTLS版本</br></br>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "SSL 版本",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "</br>此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如</br><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或</br><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。</br></br>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。</br>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。</br></br>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。</br>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式</br>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。</br>不兼容的密码套件将被自动删除。</br></br>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。</br></br></br>注：PSK 的 Ciphers 不支持 tlsv1.3</br>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。</br></br></br>PSK 密码套件：</br><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,</br>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,</br>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,</br>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code></br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "</br>用于查找预共享密钥（PSK）标识的 EMQX 内部回调。</br>",
                        "label": "SSL PSK 用户回调",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "</br>SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。</br>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。</br>",
                        "label": "SSL 重新协商",
                        "type": "boolean"
                    },
                    "dhfile": {
                        "description": "</br>如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数</br></br>注意：TLS 1.3不支持<code>dhfile</code>选项。</br>",
                        "label": "SSL dhfile",
                        "type": "string"
                    },
                    "honor_cipher_order": {
                        "default": true,
                        "description": "</br>一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。</br>",
                        "label": "SSL honor cipher order",
                        "type": "boolean"
                    },
                    "client_renegotiation": {
                        "default": true,
                        "description": "</br>在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。</br>这可能会成为拒绝服务攻击的载体。</br>SSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。</br>默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。</br>",
                        "label": "SSL 客户端冲协商",
                        "type": "boolean"
                    },
                    "handshake_timeout": {
                        "default": "15s",
                        "description": "</br>握手完成所允许的最长时间</br>",
                        "label": "握手超时时间",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "limiter.limiter_opts": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "是否开启",
                        "label": "是否开启",
                        "type": "boolean"
                    },
                    "rate": {
                        "default": "infinity",
                        "description": "桶的令牌生成速率",
                        "label": "速率",
                        "type": "string"
                    },
                    "burst": {
                        "default": 0,
                        "description": "突发速率。</br>突发速率允许短时间内速率超过设置的速率值，突发速率 + 速率 = 当前桶能达到的最大速率值",
                        "label": "突发速率",
                        "type": "string"
                    },
                    "bucket": {
                        "default": {
                            "default": {}
                        },
                        "description": "桶的配置",
                        "label": "桶的配置",
                        "properties": {
                            "$bucket_name": {
                                "$ref": "#/components/schemas/limiter.bucket_opts"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "broker.mqtt_wss_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/broker.tcp_opts"
                    },
                    "ssl": {
                        "description": "ssl Description",
                        "label": "ssl",
                        "$ref": "#/components/schemas/broker.listener_wss_opts"
                    },
                    "websocket": {
                        "description": "websocket Description",
                        "label": "websocket",
                        "$ref": "#/components/schemas/broker.ws_opts"
                    },
                    "bind": {
                        "description": "</br>监听套接字的 IP 地址和端口。</br>",
                        "label": "IP 地址和端口",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "监听器接收池的大小。",
                        "label": "接收器数量",
                        "type": "string"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "</br>监听器允许的最大并发连接数。</br>",
                        "label": "最大并发连接数",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "</br>发布或订阅时，请在所有主题前面加上 mountpoint 字符串。</br></br>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。</br></br>例如，如果客户机 A 使用 <code>listeners.tcp.<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。</br>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息</br></br>设置为<code>\"\"</code> 以禁用该功能</br></br>mountpoint 字符串中的变量：</br>- <code>${clientid}</code>: clientid</br>- <code>${username}</code>: username</br>",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "</br>监听器所属的配置组。</br>",
                        "label": "配置组",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "</br>速率限制类型</br>",
                        "label": "速率限制类型",
                        "properties": {
                            "$ratelimit_name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "此监听器的访问控制规则。",
                        "items": {
                            "type": "string"
                        },
                        "label": "访问控制规则",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "</br>如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 </br>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/</br>",
                        "label": "Proxy protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "</br>代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。</br>",
                        "label": "Proxy protocol 超时时间",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "</br>监听器认证重载。</br></br>认证配置可以是单个认证器实例，也可以是一个认证器数组组成的认证链。</br>执行登录验证时（用户名、客户端 ID 等），将按配置的顺序执行</br>",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "每个监听器的认证覆盖",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "authn-builtin_db.authentication": {
                "required": [
                    "user_id_type",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "built_in_database"
                        ],
                        "type": "enum"
                    },
                    "user_id_type": {
                        "default": "username",
                        "description": "指定使用客户端ID `clientid` 还是用户名 `username` 进行认证。",
                        "label": "认证 ID 类型",
                        "symbols": [
                            "clientid",
                            "username"
                        ],
                        "type": "enum"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash creation and verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt_rw"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-jwt.ssl_enable": {
                "properties": {
                    "enable": {
                        "description": "启用/禁用 SSL。",
                        "label": "启用/禁用 SSL",
                        "symbols": [
                            true
                        ],
                        "type": "enum"
                    },
                    "cacertfile": {
                        "description": "包含 PEM 编码的 CA 证书的文件的路径。",
                        "label": "CA 证书文件",
                        "type": "string"
                    },
                    "certfile": {
                        "description": "包含用户证书的文件的路径。",
                        "label": "证书文件",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "包含 PEM 编码的用户私钥的文件的路径。",
                        "label": "私钥文件",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "指定握手过程中是否校验对端证书。",
                        "label": "Verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "server_name_indication": {
                        "description": "服务器名称指示（SNI）。",
                        "label": "服务器名称指示",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "limiter.bucket_opts": {
                "properties": {
                    "rate": {
                        "default": "infinity",
                        "description": "桶的令牌生成速率",
                        "label": "速率",
                        "type": "string"
                    },
                    "capacity": {
                        "default": "infinity",
                        "description": "该令牌桶的容量",
                        "label": "容量",
                        "type": "string"
                    },
                    "initial": {
                        "default": "0",
                        "description": "桶中的初始令牌数",
                        "label": "初始令牌数",
                        "type": "string"
                    },
                    "per_client": {
                        "default": {},
                        "description": "对桶的每个使用者的速率控制设置，这个不是必须的",
                        "label": "每个使用者的限制",
                        "$ref": "#/components/schemas/limiter.client_bucket"
                    }
                },
                "type": "object"
            },
            "cluster.cluster_etcd": {
                "properties": {
                    "server": {
                        "description": "指定 etcd 服务的地址。如有多个服务使用逗号 , 分隔。</br>当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。</br>          ",
                        "label": "Etcd 服务器地址",
                        "readOnly": true,
                        "type": "comma_separated_string"
                    },
                    "prefix": {
                        "default": "emqxcl",
                        "description": "指定 etcd 路径的前缀。每个节点在 etcd 中都会创建一个路径:</br>v2/keys/<prefix>/<cluster.name>/<node.name> </br>当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。</br>      ",
                        "label": "Etcd 路径前缀",
                        "readOnly": true,
                        "type": "string"
                    },
                    "node_ttl": {
                        "default": "1m",
                        "description": "指定 etcd 中节点信息的过期时间。</br>当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。</br>          ",
                        "label": "Etcd 节点过期时间",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "ssl": {
                        "description": "当使用 TLS 连接 etcd 时的配置选项。</br>当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。</br>          ",
                        "label": "Etcd SSL 选项",
                        "readOnly": true,
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "broker.listener_ssl_opts": {
                "properties": {
                    "cacertfile": {
                        "description": "</br>受信任的PEM格式CA证书捆绑文件</br>此文件中的证书用于验证TLS对等方的证书。</br>如果要信任新CA，请将新证书附加到文件中。</br>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）</br>注意：从文件中失效（删除）证书不会影响已建立的连接。</br>",
                        "label": "CA 证书文件",
                        "type": "string"
                    },
                    "certfile": {
                        "description": "</br>PEM格式证书链文件</br>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，然后是直接颁发者证书，依此类推。</br>虽然根CA证书是可选的，但它应该放在</br>如果要添加文件，请将其删除。</br>",
                        "label": "证书文件",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "</br>PEM格式的私钥文件。</br>",
                        "label": "私钥文件",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "</br>启用或禁用对等验证。</br>",
                        "label": "对等验证",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "</br>启用 TLS 会话重用。</br>",
                        "label": "TLS 会话重用",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "</br>在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。因此，如果深度为0，则对等方必须由受信任的根CA直接签名；如果1，路径可以是PEER、CA、ROOT-CA；如果是2，则路径可以是PEER、CA、CA、ROOT-CA等等。默认值为10。</br>",
                        "label": "CA 证书深度",
                        "type": "number"
                    },
                    "password": {
                        "description": "</br>包含用户密码的字符串。</br>仅在私钥文件受密码保护时使用。</br>",
                        "label": "秘钥文件密码",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "</br>支持所有TLS/DTLS版本</br></br>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "SSL 版本",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "</br>此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如</br><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或</br><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。</br></br>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。</br>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。</br></br>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。</br>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式</br>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。</br>不兼容的密码套件将被自动删除。</br></br>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。</br></br></br>注：PSK 的 Ciphers 不支持 tlsv1.3</br>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。</br></br></br>PSK 密码套件：</br><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,</br>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,</br>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,</br>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code></br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "</br>用于查找预共享密钥（PSK）标识的 EMQX 内部回调。</br>",
                        "label": "SSL PSK 用户回调",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "</br>SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。</br>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。</br>",
                        "label": "SSL 重新协商",
                        "type": "boolean"
                    },
                    "dhfile": {
                        "description": "</br>如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数</br></br>注意：TLS 1.3不支持<code>dhfile</code>选项。</br>",
                        "label": "SSL dhfile",
                        "type": "string"
                    },
                    "fail_if_no_peer_cert": {
                        "default": false,
                        "description": "</br>TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。</br>如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。</br>如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。</br>",
                        "label": "没有证书则 SSL 失败",
                        "type": "boolean"
                    },
                    "honor_cipher_order": {
                        "default": true,
                        "description": "</br>一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。</br>",
                        "label": "SSL honor cipher order",
                        "type": "boolean"
                    },
                    "client_renegotiation": {
                        "default": true,
                        "description": "</br>在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。</br>这可能会成为拒绝服务攻击的载体。</br>SSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。</br>默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。</br>",
                        "label": "SSL 客户端冲协商",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "broker.persistent_table_mria_opts": {
                "properties": {
                    "ram_cache": {
                        "default": true,
                        "description": "在内存中保持一份数据的副本，以便更快地访问。",
                        "label": "内存缓存",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-hash.pbkdf2": {
                "required": [
                    "iterations",
                    "mac_fun",
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "PBKDF2 password hashing.",
                        "label": "name",
                        "symbols": [
                            "pbkdf2"
                        ],
                        "type": "enum"
                    },
                    "mac_fun": {
                        "description": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                        "label": "mac_fun",
                        "symbols": [
                            "md4",
                            "md5",
                            "ripemd160",
                            "sha",
                            "sha224",
                            "sha256",
                            "sha384",
                            "sha512"
                        ],
                        "type": "enum"
                    },
                    "iterations": {
                        "description": "Iteration count for PBKDF2 hashing algorithm.",
                        "label": "iterations",
                        "type": "number"
                    },
                    "dk_length": {
                        "description": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                        "label": "dk_length",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "authn-mongodb.sharded-cluster": {
                "required": [
                    "database",
                    "servers",
                    "mongo_type",
                    "collection",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "认证机制。",
                        "label": "认证机制",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "后端类型。",
                        "label": "后端类型",
                        "symbols": [
                            "mongodb"
                        ],
                        "type": "enum"
                    },
                    "collection": {
                        "description": "存储认证数据的集合。",
                        "label": "集合",
                        "type": "string"
                    },
                    "filter": {
                        "default": {},
                        "description": "</br>在查询中定义过滤条件的条件表达式。</br>过滤器支持如下占位符：</br>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名</br>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符</br>",
                        "label": "过滤器",
                        "type": "string"
                    },
                    "password_hash_field": {
                        "description": "文档中用于存放密码散列的字段。",
                        "label": "密码散列字段",
                        "type": "string"
                    },
                    "salt_field": {
                        "description": "文档中用于存放盐值的字段。",
                        "label": "盐值字段",
                        "type": "string"
                    },
                    "is_superuser_field": {
                        "description": "文档中用于定义用户是否具有超级用户权限的字段。",
                        "label": "超级用户字段",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                        "label": "启用",
                        "type": "boolean"
                    },
                    "mongo_type": {
                        "default": "sharded",
                        "description": "Sharded cluster模式。",
                        "label": "Sharded cluster模式",
                        "symbols": [
                            "sharded"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "</br>集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`</br>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。</br>主机名具有以下形式：`Host[:Port]`。</br>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "服务器列表",
                        "type": "array"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "写模式。",
                        "label": "写模式",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "使用 DNS SRV 记录。",
                        "label": "SRV 记录",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "与用户证书关联的数据库名称。",
                        "label": "认证源",
                        "type": "string"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "dashboard.dashboard": {
                "required": [
                    "default_password",
                    "default_username"
                ],
                "properties": {
                    "listeners": {
                        "description": "仪表盘监听器设置。",
                        "label": "监听器",
                        "$ref": "#/components/schemas/dashboard.listeners"
                    },
                    "default_username": {
                        "default": "admin",
                        "description": "默认的仪表板用户名",
                        "label": "默认用户名",
                        "readOnly": true,
                        "type": "string"
                    },
                    "default_password": {
                        "default": "public",
                        "description": "默认的仪表板用户密码</br>为了安全，应该尽快修改密码。",
                        "label": "默认密码",
                        "readOnly": true,
                        "type": "string"
                    },
                    "sample_interval": {
                        "default": "10s",
                        "description": "更新仪表板中显示的指标的时间间隔。必须小于60，且被60的整除。",
                        "label": "sample_interval",
                        "type": "duration"
                    },
                    "token_expired_time": {
                        "default": "60m",
                        "description": "JWT token 过期时间",
                        "label": "JWT 过期时间",
                        "type": "duration"
                    },
                    "cors": {
                        "default": false,
                        "description": "支持跨域资源共享(CORS)</br>允许服务器指示任何来源(域名、协议或端口)，除了本服务器之外的任何浏览器应允许加载资源。",
                        "label": "跨域资源共享",
                        "type": "boolean"
                    },
                    "i18n_lang": {
                        "default": "en",
                        "description": "swagger多语言支持",
                        "label": "多语言支持",
                        "readOnly": true,
                        "symbols": [
                            "en",
                            "zh"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "zone.force_shutdown": {
                "properties": {
                    "enable": {
                        "description": "启用 `force_shutdown` 功能",
                        "label": "启用 `force_shutdown` 功能",
                        "type": "boolean"
                    },
                    "max_message_queue_len": {
                        "description": "消息队列的最大长度",
                        "label": "进程邮箱消息队列的最大长度",
                        "minimum": 0,
                        "type": "number"
                    },
                    "max_heap_size": {
                        "description": "Heap 的总大小",
                        "label": "Heap 的总大小",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            }
        }
    },
    "info": {
        "title": "EMQX Hot Conf Schema",
        "version": "0.1.0"
    },
    "paths": {
        "/configs": {
            "get": {
                "properties": {
                    "listeners": {
                        "description": "listeners Description",
                        "label": "listeners",
                        "$ref": "#/components/schemas/broker.listeners"
                    },
                    "zones": {
                        "description": "<code>zone</code> 是按<code>name</code> 分组的一组配置。</br>对于灵活的配置映射，可以将 <code>name</code> 设置为侦听器的 <code>zone</code> 配置。</br>注：名为 <code>default</code> 的内置区域是自动创建的，无法删除。",
                        "label": "zones",
                        "properties": {
                            "$my_zone_name": {
                                "$ref": "#/components/schemas/broker.zone"
                            }
                        },
                        "type": "object"
                    },
                    "node": {
                        "description": "node Description",
                        "label": "node",
                        "$ref": "#/components/schemas/cluster.node"
                    },
                    "cluster": {
                        "description": "cluster Description",
                        "label": "cluster",
                        "$ref": "#/components/schemas/cluster.cluster"
                    },
                    "log": {
                        "description": "log Description",
                        "label": "log",
                        "$ref": "#/components/schemas/cluster.log"
                    },
                    "broker": {
                        "description": "Broker 相关配置项。",
                        "label": "broker",
                        "$ref": "#/components/schemas/broker.broker"
                    },
                    "sysmon": {
                        "description": "sysmon Description",
                        "label": "sysmon",
                        "$ref": "#/components/schemas/broker.sysmon"
                    },
                    "alarm": {
                        "description": "alarm Description",
                        "label": "alarm",
                        "$ref": "#/components/schemas/broker.alarm"
                    },
                    "persistent_session_store": {
                        "description": "persistent_session_store Description",
                        "label": "persistent_session_store",
                        "$ref": "#/components/schemas/broker.persistent_session_store"
                    },
                    "trace": {
                        "description": "trace Description",
                        "label": "trace",
                        "$ref": "#/components/schemas/broker.trace"
                    },
                    "dashboard": {
                        "description": "EMQX仪表板配置",
                        "label": "仪表板",
                        "$ref": "#/components/schemas/dashboard.dashboard"
                    },
                    "limiter": {
                        "description": "Settings for the rate limiter.",
                        "label": "limiter",
                        "$ref": "#/components/schemas/limiter.limiter"
                    }
                },
                "type": "object"
            }
        },
        "/configs/alarm": {
            "get": {
                "$ref": "#/components/schemas/broker.alarm"
            },
            "put": {
                "$ref": "#/components/schemas/broker.alarm"
            }
        },
        "/configs/broker": {
            "get": {
                "$ref": "#/components/schemas/broker.broker"
            },
            "put": {
                "$ref": "#/components/schemas/broker.broker"
            }
        },
        "/configs/cluster": {
            "get": {
                "$ref": "#/components/schemas/cluster.cluster"
            },
            "put": {
                "$ref": "#/components/schemas/cluster.cluster"
            }
        },
        "/configs/dashboard": {
            "get": {
                "$ref": "#/components/schemas/dashboard.dashboard"
            },
            "put": {
                "$ref": "#/components/schemas/dashboard.dashboard"
            }
        },
        "/configs/global_zone": {
            "get": {
                "properties": {
                    "mqtt": {
                        "description": "Global MQTT configuration.</br>The configs here work as default values which can be overridden</br>in <code>zone</code> configs",
                        "label": "mqtt",
                        "$ref": "#/components/schemas/zone.mqtt"
                    },
                    "stats": {
                        "description": "Enable/disable statistic data collection.</br>Statistic data such as message receive/send count/rate etc. It provides insights of system performance and helps to diagnose issues. You can find statistic data from the dashboard, or from the '/stats' API.",
                        "label": "stats",
                        "$ref": "#/components/schemas/zone.stats"
                    },
                    "flapping_detect": {
                        "description": "This config controls the allowed maximum number of `CONNECT` packets received</br>from the same clientid in a time frame defined by `window_time`.</br>After the limit is reached, successive `CONNECT` requests are forbidden</br>(banned) until the end of the time period defined by `ban_time`.",
                        "label": "flapping_detect",
                        "$ref": "#/components/schemas/zone.flapping_detect"
                    },
                    "force_shutdown": {
                        "description": "When the process message queue length, or the memory bytes</br>reaches a certain value, the process is forced to close.</br></br>Note: \"message queue\" here refers to the \"message mailbox\"</br>of the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
                        "label": "force_shutdown",
                        "$ref": "#/components/schemas/zone.force_shutdown"
                    },
                    "conn_congestion": {
                        "description": "Settings for `conn_congestion` alarm.</br></br>Sometimes the MQTT connection (usually an MQTT subscriber) may</br>get \"congested\", because there are too many packets to be sent.</br>The socket tries to buffer the packets until the buffer is</br>full. If more packets arrive after that, the packets will be</br>\"pending\" in the queue, and we consider the connection</br>congested.</br></br>Note: `sndbuf` can be set to larger value if the</br>alarm is triggered too often.</br>The name of the alarm is of format `conn_congestion/<ClientID>/<Username>`,</br>where the `<ClientID>` is the client ID of the congested MQTT connection,</br>and `<Username>` is the username or `unknown_user`.",
                        "label": "conn_congestion",
                        "$ref": "#/components/schemas/zone.conn_congestion"
                    },
                    "force_gc": {
                        "description": "Force garbage collection in MQTT connection process after</br> they process certain number of messages or bytes of data.",
                        "label": "force_gc",
                        "$ref": "#/components/schemas/zone.force_gc"
                    },
                    "overload_protection": {
                        "description": "Overload protection mechanism monitors the load of the system and temporarily</br>disables some features (such as accepting new connections) when the load is high.",
                        "label": "overload_protection",
                        "$ref": "#/components/schemas/zone.overload_protection"
                    }
                },
                "type": "object"
            },
            "put": {
                "properties": {
                    "mqtt": {
                        "description": "Global MQTT configuration.</br>The configs here work as default values which can be overridden</br>in <code>zone</code> configs",
                        "label": "mqtt",
                        "$ref": "#/components/schemas/zone.mqtt"
                    },
                    "stats": {
                        "description": "Enable/disable statistic data collection.</br>Statistic data such as message receive/send count/rate etc. It provides insights of system performance and helps to diagnose issues. You can find statistic data from the dashboard, or from the '/stats' API.",
                        "label": "stats",
                        "$ref": "#/components/schemas/zone.stats"
                    },
                    "flapping_detect": {
                        "description": "This config controls the allowed maximum number of `CONNECT` packets received</br>from the same clientid in a time frame defined by `window_time`.</br>After the limit is reached, successive `CONNECT` requests are forbidden</br>(banned) until the end of the time period defined by `ban_time`.",
                        "label": "flapping_detect",
                        "$ref": "#/components/schemas/zone.flapping_detect"
                    },
                    "force_shutdown": {
                        "description": "When the process message queue length, or the memory bytes</br>reaches a certain value, the process is forced to close.</br></br>Note: \"message queue\" here refers to the \"message mailbox\"</br>of the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
                        "label": "force_shutdown",
                        "$ref": "#/components/schemas/zone.force_shutdown"
                    },
                    "conn_congestion": {
                        "description": "Settings for `conn_congestion` alarm.</br></br>Sometimes the MQTT connection (usually an MQTT subscriber) may</br>get \"congested\", because there are too many packets to be sent.</br>The socket tries to buffer the packets until the buffer is</br>full. If more packets arrive after that, the packets will be</br>\"pending\" in the queue, and we consider the connection</br>congested.</br></br>Note: `sndbuf` can be set to larger value if the</br>alarm is triggered too often.</br>The name of the alarm is of format `conn_congestion/<ClientID>/<Username>`,</br>where the `<ClientID>` is the client ID of the congested MQTT connection,</br>and `<Username>` is the username or `unknown_user`.",
                        "label": "conn_congestion",
                        "$ref": "#/components/schemas/zone.conn_congestion"
                    },
                    "force_gc": {
                        "description": "Force garbage collection in MQTT connection process after</br> they process certain number of messages or bytes of data.",
                        "label": "force_gc",
                        "$ref": "#/components/schemas/zone.force_gc"
                    },
                    "overload_protection": {
                        "description": "Overload protection mechanism monitors the load of the system and temporarily</br>disables some features (such as accepting new connections) when the load is high.",
                        "label": "overload_protection",
                        "$ref": "#/components/schemas/zone.overload_protection"
                    }
                },
                "type": "object"
            }
        },
        "/configs/limiter": {
            "get": {
                "$ref": "#/components/schemas/limiter.limiter"
            },
            "put": {
                "$ref": "#/components/schemas/limiter.limiter"
            }
        },
        "/configs/limiter/:limiter_type": {
            "get": {
                "$ref": "#/components/schemas/limiter.limiter_opts"
            },
            "put": {
                "$ref": "#/components/schemas/limiter.limiter_opts"
            }
        },
        "/configs/listeners": {
            "get": {
                "$ref": "#/components/schemas/broker.listeners"
            },
            "put": {
                "$ref": "#/components/schemas/broker.listeners"
            }
        },
        "/configs/log": {
            "get": {
                "$ref": "#/components/schemas/cluster.log"
            },
            "put": {
                "$ref": "#/components/schemas/cluster.log"
            }
        },
        "/configs/node": {
            "get": {
                "$ref": "#/components/schemas/cluster.node"
            },
            "put": {
                "$ref": "#/components/schemas/cluster.node"
            }
        },
        "/configs/persistent_session_store": {
            "get": {
                "$ref": "#/components/schemas/broker.persistent_session_store"
            },
            "put": {
                "$ref": "#/components/schemas/broker.persistent_session_store"
            }
        },
        "/configs/sysmon": {
            "get": {
                "$ref": "#/components/schemas/broker.sysmon"
            },
            "put": {
                "$ref": "#/components/schemas/broker.sysmon"
            }
        },
        "/configs/trace": {
            "get": {
                "$ref": "#/components/schemas/broker.trace"
            },
            "put": {
                "$ref": "#/components/schemas/broker.trace"
            }
        },
        "/configs/zones": {
            "get": {
                "properties": {
                    "$my_zone_name": {
                        "$ref": "#/components/schemas/broker.zone"
                    }
                },
                "type": "object"
            },
            "put": {
                "properties": {
                    "$my_zone_name": {
                        "$ref": "#/components/schemas/broker.zone"
                    }
                },
                "type": "object"
            }
        },
        "/configs_reset/:rootname": {}
    }
}